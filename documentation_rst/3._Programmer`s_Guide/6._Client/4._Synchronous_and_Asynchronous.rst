**Synchronous and Asynchronous**
--------------------------------

With the Softing OPC Toolkit a user can choose the modality of executing
operations. This can be done using the functionality of the
**ExecutionOptions** class. The execution of operations can be done in
two ways: **synchronous** and **asynchronous**.

With synchronous mode the client program complete request will be
executed inside the function call and the function returns when the
complete request is worked off. Synchronous calls are recommended if the
requested operation will be executed fast (e.g. values are available in
the PC). Otherwise the client will be blocked for a longer time.

With asynchronous mode the client sends a request to the server and the
function returns immediately after placing that request in a queue at
the server. The operation itself (e.g. a read of a value) will be
executed asnychronously by the server and the client will be informed
about the finished operation and the returned values by an event (.Net)
or a callback (C++). Asynchronous mode of executing operation is
recommended if the operation takes a longer time (values have to be
requested) and the client is able to use that time for other operations.

The modality of executing an operation is established by setting the
execution options for the methods that have this possibility.

If no ExecutionOptions are passed to such a method (passing a null in
.Net or a 0 in C++) the method will be executed synchronously.

The default execution type of a new ExecutionOptions object is
synchronous.

In the asynchronous scenario, an **ExecutionContext** exists having the
purpose of identifying the operation executed for an object (e.g. in
case of three read operations on the same subscription, the
ExecutionContext will identify the read for which the callback of read
complete came). This means that the value of the ExecutionContext must
be carefully chosen such that it uniquely identifies an operation among
the others.

Note
~~~~

::

   The ExecutionOptions.ExecutionContext property MUST BE INCREMENTED after each asynchronous operation execution.

C
~

::

   executionOptions.ExecutionContext = executionOptions.ExecutionContext + 1;

VB .NET
~~~~~~~

::

   executionOptions.ExecutionContext = Convert.ToUInt32(Convert.ToInt32(executionOptions.ExecutionContext) + 1)

.. _c-1:

C++
~~~

::

   ExecutionOptions executionOptions;
   executionOptions.setExecutionType(SYNCHRONOUS);
