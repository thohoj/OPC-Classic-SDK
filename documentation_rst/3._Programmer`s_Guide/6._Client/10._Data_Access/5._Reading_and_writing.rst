**Reading and writing**
-----------------------

The **DaSession**, **DaSubscription** and **DaItem** are Softing OPC
Toolkit objects used for modelling a Data Access Client. Among the most
important tasks of a Data Access Client is the one of reading and
writing values, as well as getting information about the change of
values.

Reading
~~~~~~~

Reading values from server is possible using the **Read** method each of
the DaSession, DaSubscription and DaItem objects have.

When reading data from a server, the values can be taken from the
server’s internal cache or from the device. Cache reads are only
possible if both the DaSubscription and DaItem objects are active since
only in this case the cache is updated. The value of attribute
**RequestedUpdateRate** (available for DaSubscription) influences the
freshness of the value in the cache as it controls the speed with which
the server will read the value and enter it into the cache. With a
device read, the value is read directly from the device, i.e. from the
data source.

In the toolkit, two constants permit specifying whether the values are
read from device or cache: MAX_AGE_DEVICE (the values are always taken
from the device) and MAX_AGE_CACHE (the values are always taken from
cache). Of course, there are situations when only in certain condition
the values are to be read from cache (e.g. if a value is fresh enough).
Therefore, when using the Read method, the first parameter specifies the
oldest (in milliseconds) acceptable cached value when reading an item.
According with this parameter, it is decided from where the value is
taken. If a value newer then this parameter exists in the cache exists,
this value is sent. Otherwise the value is read from the device.

The reading operation can be done in either synchronous or asynchronous
manner, based on how is most convenient.

With **synchronous** reading, the client calls the **Read** method and
waits for the return value. Synchronous reading should only be used if
data access takes place quickly (e.g. values are available in the PC) as
otherwise the client would be blocked for too long.

Example 1
~~~~~~~~~

The following example shows how to **synchronously** read the value of
two items using DaSession object. For a more detailed example on this
topic check the **DAConsole** example. ### C#

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...

   ValueQT[] values;
   int[] results;
   string[] itemPaths = new string[] {"", ""};

   // defines the identifiers of the items to be read; the identifiers must be valid in the server’s namespace
   string[] itemIds = new string[]{"maths.sin", "time.local.second"};

   // gets the application instance
   Application application = Application.Instance;

   // initializes the application
   application.Initialize();

   // creates a new DaSession object and adds it to the application
   DaSession session = new DaSession("opcda://localhost/Softing.OPCToolboxDemo_ServerDA/{2e565242-b238-11d3-842d-0008c779d775}");

   // sets the execution options
   ExecutionOptions executionOptions = new ExecutionOptions();
   executionOptions.ExecutionType = EnumExecutionType.SYNCHRONOUS;

   // connects object to the server
   session.Connect(true, false, executionOptions);

   // reads the items using session object
   session.Read(
       0, // the values are read from the device
       itemIds,
       itemPaths,
       out values,
       out results,
       executionOptions);
   ...

   // disconnect the session
   session.Disconnect(executionOptions); // sync

   // terminate the Toolkit client application
   application.Terminate();

   // mark the DA Session object for deletion in order to release TK Core handles
   session = null;

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...

   Dim values As ValueQT() = Nothing
   Dim results As Integer() = Nothing
   Dim itemPaths As String() = New String() {"", ""}

   'defines the identifiers of the items to be read; the identifiers must be valid in the server’s namespace
   Dim itemIds As String() = New String(){"maths.sin", "time.local.second"}

   'gets the application instance
   Dim application As Application = Application.Instance

   'initializes the application
   application.Initialize()

   'creates a new DaSession object and adds it to the application
   Dim session As New DaSession("opcda://localhost/Softing.OPCToolboxDemo_ServerDA/{2e565242-b238-11d3-842d-0008c779d775}")

   'sets the execution options
   Dim executionOptions As New ExecutionOptions
   executionOptions.ExecutionType = EnumExecutionType.SYNCHRONOUS

   'connects object to the server
   session.Connect(True, False, executionOptions)

   'reads the items using session object
   session.Read( _
       Convert.ToUInt32(0), _
       itemIds, _
       itemPaths, _
       values, _
       results, _
       executionOptions)
   ...

   'disconnect the session
   session.Disconnect(executionOptions) 'sync


   'terminate the Toolkit client application
   application.Terminate()

   'mark the DA Session object for deletion in order to release TK Core handles
   session = Nothing

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...
   int _tmain(int argc, _TCHAR* argv[])
   {
       unsigned long readCount = 2;
       std::vector<ValueQT*> valuesToRead(readCount,NULL);
       std::vector<ValueQT*>::iterator valuesToReadIterator;
       std::vector<tstring> itemIds;
       std::vector<tstring> itemPaths(readCount, _T(""));
       std::vector<long> readResults(readCount, E_FAIL);

       itemIds.push_back(_T("maths.sin"));
       itemIds.push_back(_T("time.local.second"));

       Application* application = getApplication();

       application->initialize();

       // creates a new DaSession object and adds it to the application
       DaSession* session = new DaSession(_T("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}"));

       // sets the execution options
       ExecutionOptions executionOptions;
       executionOptions.setExecutionType(EnumExecutionType_SYNCHRONOUS);

       // connects object to the server
       session->connect(TRUE, FALSE, &executionOptions);

       session->read(
           0,
           itemIds,
           itemPaths,
           valuesToRead,
           readResults,
           &executionOptions);

       // do something with the read values
       ...
       // deallocate memory allocated for "valuesToRead" array
       for(valuesToReadIterator = valuesToRead.begin(); valuesToReadIterator != valuesToRead.end(); valuesToReadIterator++){
           if( *valuesToReadIterator != NULL)
               delete *valuesToReadIterator;
       } // end for

       // disconnect the session
       session->disconnect(&executionOptions); // sync

       // terminate the Toolkit client application
       application->terminate();

       // delete the DA Session object in order to release TK Core handles
       delete session;

       // releases the resources used by the Toolkit application
       releaseApplication();
   }

Example 2
~~~~~~~~~

The following example shows how to **synchronously** read the value of
two items using DaSubscription object. For a more detailed example on
this topic check the **DAConsole** example. ### C#

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...
   ValueQT[] values;
   int[] results;

   // gets the application instance
   Application application = Application.Instance;
   application.Initialize();

   // creates a new DaSession object and adds it to the application
   DaSession session = new DaSession("opcda://localhost/Softing.OPCToolboxDemo_ServerDA/{2e565242-b238-11d3-842d-0008c779d775}");

   // creates a new DaSubscription object and adds it to the created session
   DaSubscription subscription = new DaSubscription(500,session);

   // creates a new DaItem object and adds it to the subscription
   DaItem item1 = new DaItem("maths.sin", subscription);

   // creates a new DaItem object and adds it to the subscription
   DaItem item2 = new DaItem("time.local.second", subscription);

   // sets the execution options
   ExecutionOptions executionOptions = new ExecutionOptions();
   executionOptions.ExecutionType = EnumExecutionType.SYNCHRONOUS;

   // connects object to the server
   session.Connect(true, false, executionOptions);

   // reads items using DaSubscription object
   subscription.Read(
       100,
       new DaItem[] {item1, item2},
       out values,
       out results,
       executionOptions);

   // do something with the read values
   ...

   // disconnect the session
   session.Disconnect(executionOptions); // sync

   // terminate the Toolkit client application
   application.Terminate();

   // unlink the client objects in order to decrement TK Core references
   subscription.RemoveDaItem(item1);
   subscription.RemoveDaItem(item2);
   session.RemoveSubscription(subscription);

   // mark the used objects for deletion in order to release TK Core handles
   item1 = null;
   item2 = null;
   subscription = null;
   session = null;

.. _vb-.net-1:

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...
   Dim values As ValueQT() = Nothing
   Dim results As Integer() = Nothing

   'gets the application instance
   Dim application As Application = Application.Instance

   'initializes the application
   application.Initialize()

   'creates a new DaSession object and adds it to the application
   Dim session As New DaSession("opcda://localhost/Softing.OPCToolboxDemo_ServerDA/{2e565242-b238-11d3-842d-0008c779d775}")

   'creates a new DaSubscription object and adds it to the created session
    Dim subscription As New DaSubscription ( Convert.ToUInt32(1000), session)

   'creates a new DaItem object and adds it to the subscription
   Dim item1 As New DaItem("maths.sin" , subscription)

   'creates a new DaItem object and adds it to the subscription
   Dim item2 As New DaItem("time.local.second", subscription)

   'sets the execution options
   Dim executionOptions As New ExecutionOptions

   'connects object to the server
   session.Connect(True, False, executionOptions)

   'reads items using DaSubscription object
   subscription.Read( _
       Convert.ToUInt32(100), _
       New DaItem() {item1, item2}, _
       values, _
       results, _
       executionOptions)

   'do something with the read values
   ...

   'disconnect the session
   session.Disconnect(executionOptions) 'sync


   'terminate the Toolkit client application
   application.Terminate()

   'unlink the client objects in order to decrement TK Core references
   subscription.RemoveDaItem(item1)
   subscription.RemoveDaItem(item2)
   session.RemoveSubscription(subscription)

   'mark the used objects for deletion in order to release TK Core handles
   item1 = Nothing
   item2 = Nothing
   subscription = Nothing
   session = Nothing

.. _c-1:

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...
   int _tmain(int argc, _TCHAR* argv[]) {

       unsigned long readCount = 2;
       std::vector<ValueQT*> valuesToRead(readCount,NULL);
       std::vector<DaItem*>itemsToRead(readCount,NULL);
       std::vector<ValueQT*>::iterator valuesToReadIterator;
       std::vector<long> readResults(readCount,E_FAIL);

       Application* application = getApplication();

       // creates a new DaSession object and adds it to the application
       DaSession* session = new DaSession(_T("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}"));

       // creates a new DaSubscription object
       DaSubscription* subscription = new DaSubscription(1000,session);

       // creates a new DaItem object
       DaItem* item1 = new DaItem(_T("maths.sin"),subscription);

       // creates a new DaItem object
       DaItem* item2 = new DaItem(_T("time.local.second"),subscription);

       itemsToRead[0] = item1;
       itemsToRead[1] = item2;

       // sets the execution options
       ExecutionOptions executionOptions;
       executionOptions.setExecutionType(EnumExecutionType_SYNCHRONOUS);

       // connects object to the server
       session->connect(TRUE, FALSE, &executionOptions);

       // reads items using subscription object
       subscription->read(
           0,
           itemsToRead,
           valuesToRead,
           readResults,
           &executionOptions);

       // do something with the read values
       ...

       // deallocates memory allocated for "valuesToRead" array
       for(valuesToReadIterator = valuesToRead.begin(); valuesToReadIterator != valuesToRead.end(); valuesToReadIterator++){
           if( *valuesToReadIterator != NULL)
               delete *valuesToReadIterator;
       } // end for

       // disconnect the session
       session->disconnect(&executionOptions); // sync

       // unlink the client objects in order to decrement TK Core references
       subscription->removeDaItem(item1);
       subscription->removeDaItem(item2);
       session->removeSubscription(subscription);

       // terminates the Toolkit client application
       application->terminate();

       // delete the used objects in order to release TK Core handles
       delete session;
       delete subscription;
       delete item1;
       delete item2;

       // releases the resources used by the Toolkit application
       releaseApplication();
   }
   ...

Example 3
~~~~~~~~~

The following example shows how to **synchronously** read the value of a
DaItem object. For a more detailed example on this topic check the
**DAConsole** example. ### C#

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...
   ValueQT itemValue;
   int itemResult;

   // gets the application instance
   Application application = Application.Instance;

   application.Initialize();

   // creates a new DaSession object and adds it to the application
   DaSession session = new DaSession("opcda://localhost/Softing.OPCToolboxDemo_ServerDA/{2e565242-b238-11d3-842d-0008c779d775}");

   // creates a new DaSubscription object and adds it to the session
   DaSubscription subscription = new DaSubscription(500, session);

   // creates a new DaItem object and adds it to the subscription
   DaItem item1 = new DaItem("maths.sin", subscription);

   // set the execution options
   ExecutionOptions executionOptions = new ExecutionOptions();
   executionOptions.ExecutionType = EnumExecutionType.SYNCHRONOUS;

   // connect object to the server
   session.Connect(true, false, executionOptions);

   // read item's value
   item1.Read(
       100,
       out itemValue,
       out itemResult,
       executionOptions);

   // do something with the read value
   ...

   // disconnect the session
   session.Disconnect(executionOptions); // sync

   // terminate the Toolkit client application
   application.Terminate();

   // unlink the client objects in order to decrement TK Core references
   subscription.RemoveDaItem(item1);
   session.RemoveSubscription(subscription);

   // mark the objects for deletion in order to release TK Core handles
   item1 = null;
   subscription = null;
   session = null;

.. _vb-.net-2:

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...
   Dim value As ValueQT = Nothing
   Dim result As Integer

   'gets the application instance
   Dim application As Application = Application.Instance

   'initializes the application
   application.Initialize()

   'creates a new DaSession object and adds it to the application
   Dim session As New DaSession("opcda://localhost/Softing.OPCToolboxDemo_ServerDA/{2e565242-b238-11d3-842d-0008c779d775}")

   'creates a new DaSubscription object and adds it to the created session
    Dim subscription As New DaSubscription ( Convert.ToUInt32(1000), session)

   'creates a new DaItem object and adds it to the subscription
   Dim item1 As New DaItem("maths.sin" , subscription)

   'sets the execution options
   Dim executionOptions As New ExecutionOptions

   'connects object to the server
   session.Connect(True, False, executionOptions)

   'reads items using DaSubscription object
   item1.Read( _
       Convert.ToUInt32(100), _
       value, _
       result, _
       executionOptions)

   'do something with the read values
   ...

   'disconnect the session
   session.Disconnect(executionOptions) 'sync


   'terminate the Toolkit client application
   application.Terminate()

   'unlink the client objects in order to decrement TK Core references
   subscription.RemoveDaItem(item1)
   session.RemoveSubscription(subscription)

   'mark the objects for deletion in order to release TK Core handles
   item1 = Nothing
   subscription = Nothing
   session = Nothing

.. _c-2:

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...
   int _tmain(int argc, _TCHAR* argv[])
   {
       ValueQT itemValue;
       long itemResult;

       Application* application = getApplication();

       application->initialize();

       // creates a new DaSession object and adds it to the application
       DaSession* session = new DaSession(_T("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}"));

       // creates a new DaSubscription object and adds it to the session
       DaSubscription* subscription = new DaSubscription(1000,session);

       // creates a new DaItem object and adds it to the subscription
       DaItem* item1 = new DaItem(_T("maths.sin"),subscription);

       // sets the execution options
       ExecutionOptions executionOptions;
       executionOptions.setExecutionType(EnumExecutionType_SYNCHRONOUS);

       // connects object to the server
       session->connect(TRUE, FALSE, &executionOptions);

       item1->read(
           100,
           itemValue,
           itemResult,
           &executionOptions);

       // do something with the read value
       ...

       // disconnect the session
       session->disconnect(&executionOptions);  // sync

       // terminate the Toolkit client application
       application.terminate();

       // unlink the client objects in order to decrement TK Core references
       subscription->removeDaItem(item1);
       session->removeSubscription(subscription);

       // delete the objects in order to release TK Core handles
       delete item1;
       delete subscription;
       delete session;

       // releases the resources used by the Toolkit application
       releaseApplication();
   }

With **asynchronous** reading, the client calls the **Read** method and
then immediately gets feedback. After a certain interval of time, which
depends on the kind of data access, the client gets the desired value
via a callback. Asynchronous reading is to be used if data recording
through the servers takes longer (values have to be requested). The
answer to the reading request comes from the server via callback. When
the read is complete in .NET the **ReadCompleted** event is raised and
in C++ the **handleReadCompleted** method is called.

For a detailed example on this topic check the **DAConsole** example. It
is sometimes necessary to read all the items belonging to a subscription
not only a part of them. In this case, instead of using Read, the
**Refresh** method of the DaSubscription object should be used. With a
refresh, the client reads all active DaItem objects of an active
DaSubscription object. As data source, cache or device can be again
selected.

Note
~~~~

::

   Refresh applies only to reading data; no “Write - Refresh” is available.

Writing
~~~~~~~

Besides the reading functionality, the procedure of synchronous and
asynchronous writing is also determined. Writing actions are always
effected directly in the device. Writing to a cache and automatically
transferring the values at a later date is not possible.

For asynchronous writing, like for asynchronous reading, the client
receives from the server the result via a callback. When the write
completes the **WriteCompleted** event is raised (in .NET) and the
**handleWriteCompleted** method is called (in C++).

Example 4
~~~~~~~~~

The following example shows how to **synchronously** write the value of
an DaItem using DaSession object. For a more detailed example on this
topic check the **DAConsole** example. ### C#

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...
   ValueQT[] values = new ValueQT[1];
   int[] results;
   string[] itemPaths = new string[]{""};
   // define the identifiers of the items whose values are to be written; the identifiers must be valid in the server’s namespace
   string[] itemIds = new string[]{"increment.BSTR"};

   // gets the application instance
   Application application = Application.Instance;

   // initializes the application
   application.Initialize();

   // creates a new DaSession object and adds it to the application
   DaSession session = new DaSession("opcda://localhost/Softing.OPCToolboxDemo_ServerDA/{2e565242-b238-11d3-842d-0008c779d775}");

   // sets the execution options
   ExecutionOptions executionOptions = new ExecutionOptions();
   executionOptions.ExecutionType = EnumExecutionType.SYNCHRONOUS;

   // connects object to the server
   session.Connect(true, false, executionOptions);

   System.String v1 = "SOFTING";
   DateTime writeDateTime = new DateTime();
   values[0] = new ValueQT(v1, EnumQuality.QUALITY_NOT_SET, writeDateTime);

   // writes the items using session object
   session.Write(
       itemIds,
       itemPaths,
       values,
       out results,
       executionOptions);
   ...

   // disconnect the session
   session.Disconnect(executionOptions); // sync

   // terminate the Toolkit client application
   application.Terminate();

   // mark the DA Session object for deletion in order to release TK Core handles
   session = null;

.. _vb-.net-3:

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...
   Dim values As ValueQT() = New ValueQT(0) {}
   Dim results As Integer() = New Integer(0) {}

   'define the identifiers of the items whose values are to be written; the identifiers must be valid in the server’s address space
   Dim itemIds As String() = New String() {"increment.BSTR"}
   Dim itemPaths As String() = New String() {""}

   'gets the application instance
   Dim application As Application  = Application.Instance

   'initializes the application
   application.Initialize()

   'creates a new DaSession object and adds it to the application
   Dim session As New DaSession("opcda://localhost/Softing.OPCToolboxDemo_ServerDA/{2e565242-b238-11d3-842d-0008c779d775}")

   'sets the execution options
   Dim executionOptions As New ExecutionOptions

   'connects object to the server
   session.Connect(True, False, executionOptions)

   Dim writeQuality As EnumQuality
   writeQuality = [Enum].ToObject(GetType(EnumQuality), EnumQuality.QUALITY_NOT_SET)
   Dim writeDateTime as DateTime
   Dim data As String = "SOFTING"
   values(0) = New ValueQT(data, writeQuality, writeDateTime)

   'writes the items using session object
   session.Write( _
       itemIds, _
       itemPaths, _
       values, _
       results, _
       executionOptions)
   ...

   'disconnect the session
   session.Disconnect(executionOptions) 'sync


   'terminate the Toolkit client application
   application.Terminate()

   'mark the DA Session object for deletion in order to release TK Core handles
   session = Nothing

.. _c-3:

C++
~~~

::

   ...
   int _tmain(int argc, _TCHAR* argv[])
   {
       unsigned long writeCount = 1;
       std::vector<ValueQT*> valuesToWrite(writeCount,NULL);
       std::vector<tstring> itemIds;
       std::vector<tstring> itemPaths(writeCount, _T(""));
       std::vector<long> writeResults(writeCount,E_FAIL);
       Variant data;
       ValueQT* aValue;
       itemIds.push_back(_T("increment.BSTR"));

       Application* application = getApplication();

       application->initialize();

       // creates a new DaSession object and adds it to the application
       DaSession* session = new DaSession(_T("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}"));

       // sets the execution options
       ExecutionOptions executionOptions;
       executionOptions.setExecutionType(EnumExecutionType_SYNCHRONOUS);

       // connects object to the server
       session->connect(TRUE, FALSE, &executionOptions);

       DateTime writeDateTime;
       data.setBSTR(_T("Softing"));
       aValue = new ValueQT(data, EnumQuality_QUALITY_NOT_SET, writeDateTime);
       valuesToWrite[0] = aValue;

       session->write(
           itemIds,
           itemPaths,
           valuesToWrite,
           writeResults,
           &executionOptions);
       ...

       // delete allocated ValueQT
       delete aValue;

       // disconnect the session
       session->disconnect(&executionOptions); // sync

       // terminate the Toolkit client application
       application->terminate();

       // delete the DA Session object in order to release TK Core handles
       delete session;

       // releases the resources used by the Toolkit application
       releaseApplication();
   }

Example 5
~~~~~~~~~

The following example shows how to **asynchronously** write the value of
a DaItem using DaSession object. For a more detailed example on this
topic check the **DAConsole** example. ### C#

::

   class MainClass
   {
       ...
       public static void HandleSessionWriteCompleted(
           DaSession session,
           uint executionContext,
           string[] itemIDs,
           string[] itemPaths,
           ValueQT[] values,
           int[] results,
           int result)
       {
           if(ResultCode.SUCCEEDED(result))
           {
           }
           else
           {
               Console.WriteLine("Session asynchronous write failed! ");
           }
       }
       ...
       static void Main(string[] args) 
       {
           ...
           ValueQT[] values = new ValueQT[1];
           int[] results = null;
           string[] itemPaths = new string[]{""};
           // defines the identifiers of the items whose values are to be written; the identifiers must be valid in the server’s namespace
           string[] itemIds = new string[]{"increment.BSTR"};

           // gets the application instance
           Application application = Application.Instance;

           application.Initialize();

           // creates a new DaSession object and adds it to the application
           DaSession session = new DaSession("opcda://localhost/Softing.OPCToolboxDemo_ServerDA/{2e565242-b238-11d3-842d-0008c779d775}");

            session.WriteCompleted += new SessionWriteEventHandler(HandleSessionWriteCompleted);

           // sets the execution options
           ExecutionOptions executionOptions = new ExecutionOptions();
           executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS;

           // connects object to the server
           session.Connect(true, false, executionOptions);

           DateTime writeDateTime = new DateTime();
           System.String v1 = "SOFTING";
           values[0] = new ValueQT(v1, EnumQuality.QUALITY_NOT_SET, writeDateTime);

           // write the item's value
           session.Write(
               itemIds,
               itemPaths,
               values,
               out results,
               executionOptions);

           executionOptions.ExecutionContext++;
           ...

           // disconnect the session
           session.Disconnect(new Executionoptions()); // sync

           // terminate the Toolkit client application
           application.Terminate();

           // mark the DA Session object for deletion in order to release TK Core handles
           session = null;
       } // end Main
   } // end class MainClass

.. _vb-.net-4:

VB .NET
~~~~~~~

::

   Public Shared Sub HandleSessionWriteCompleted( _
       ByVal aDaSession As DaSession, _
       ByVal executionContext As System.UInt32, _
       ByVal itemIDs As String(), _
       ByVal itemPaths As String(), _
       ByVal values As ValueQT(), _
       ByVal results As Integer(), _
       ByVal result As System.Int32)

       If ResultCode.SUCCEEDED(result) Then
           System.Console.WriteLine(Convert.ToString(aDaSession) + " asynchronous write succeeded!")
           Dim i As Integer = 0
           While i < itemIDs.Length
               If ResultCode.SUCCEEDED(results(i)) Then
                   System.Console.Write(" Write succeeded! ")
                   System.Console.WriteLine( String.Format("{0,-19} {1} {2,-50} ", itemIDs(i), "-", values(i).ToString()))
               Else
                   System.Console.WriteLine(" Session asynchronous write for item " + itemIDs(i))
               End If

               i = i + 1
           End While
       Else
           System.Console.WriteLine("Session asynchronous write failed! ")
       End If
   End Sub
   ...
   Shared Sub Main(ByVal args As String())
       ...
       Dim values As ValueQT() = New ValueQT(0) {}
       Dim results As Integer() = New Integer(0) {}

       Dim itemPaths As String() = New String() {""}
       'defines the identifiers of the items whose values are to be written; the identifiers must be valid in the server’s namespace
       Dim itemIds As String() = New String() {"increment.BSTR"}

       'gets the application instance
       Dim application As Application  = Application.Instance

       'initializes the application
       application.Initialize()

       'creates a new DaSession object and adds it to the application
       Dim session As New DaSession("opcda://localhost/Softing.OPCToolboxDemo_ServerDA/{2e565242-b238-11d3-842d-0008c779d775}")

       AddHandler session.WriteCompleted, AddressOf HandleSessionWriteCompleted

       'sets the execution options
       Dim executionOptions As New ExecutionOptions
       executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS

       'connects object to the server
       session.Connect(True, False, executionOptions)

       Dim writeQuality As EnumQuality
       writeQuality = [Enum].ToObject(GetType(EnumQuality), EnumQuality.QUALITY_NOT_SET)
       Dim writeDateTime as DateTime
       Dim data As String = "SOFTING"
       values(0) = New ValueQT(data, writeQuality, writeDateTime)

       'write the item's value
       session.Write( _
           itemIds, _
           itemPaths, _
           values, _
           results, _
           executionOptions)

       'increment execution context
       Decimal.op_Increment(Convert.ToDecimal(executionOptions.ExecutionContext))
       ...

       'disconnect the session
       session.Disconnect(new ExecutionOptions()) 'sync


       'terminate the Toolkit client application
       application.Terminate()

       'mark the DA Session object for deletion in order to release TK Core handles
       session = Nothing
   End Sub

.. _c-4:

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...

   class MyDaSession : public DaSession
   {
       public:

       MyDaSession(const tstring& url): DaSession(url) {}

       void handleWriteCompleted(
           unsigned long executionContext,
           const std::vector<tstring>& itemIds,
           const std::vector<tstring>& itemPaths,
           const std::vector<ValueQT*>& values,
           const std::vector<long>& results,
           long result){

           if (SUCCEEDED(result))
           {
               // do something if write succeeded
           }
           else
           {
               _tprintf(_T("Write failed [0x%8.8X]\n"), result);
           } // end if...else
       }
   };
   ...
   int _tmain(int argc, _TCHAR* argv[])
   {
       unsigned long writeCount = 1;
       std::vector<ValueQT*> valuesToWrite(writeCount, NULL);
       std::vector<tstring> itemIds;
       std::vector<tstring> itemPaths(writeCount, _T(""));
       std::vector<long> writeResults(writeCount, E_FAIL);

       itemIds.push_back(_T("increment.BSTR"));

       Application* application = getApplication();

       application->initialize();

       // creates a new DaSession object and adds it to the application
       MyDaSession* session = new MyDaSession(_T("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}"));

       // sets the execution options
       ExecutionOptions executionOptions;
       executionOptions.setExecutionType(EnumExecutionType_ASYNCHRONOUS);
       executionOptions.setExecutionContext(0);

       // connects object to the server
       session->connect(TRUE, FALSE, &executionOptions);

       Variant data;
       data.setBSTR(_T("Softing"));
       DateTime writeDateTime;
       aValue = new ValueQT(data, EnumQuality_QUALITY_NOT_SET, writeDateTime);
       valuesToWrite[0] = aValue;

       session->write(
           itemIds,
           itemPaths,
           valuesToWrite,
           writeResults,
           &executionOptions);

       executionOptions.setExecutionContext(++executionContext);
       ...

       // delete the allocated ValueQT
       delete aValue;

       // disconnect the session
       session->disconnect(NULL); // sync

       // terminate the Toolkit client application
       application->terminate();

       // delete the DA Session object in order to release TK Core handles
       delete session;

       // releases the resources used by the Toolkit application
       releaseApplication();
   } // end main

This is not always efficient, as the client will call values regardless
of possible changes. It is important, however, only to transfer a value
from the server to the client if the value itself has changed. For this
reason, a fourth type of data exchange exists. The server reads the
values in cycles determined by the set update rate and passes to the
client via callback if a change in the values has taken place. When this
callback is received from the server, the **DataChanged** event of the
**DaSubscription** is raised (in .NET) and the **handleDataChanged**
method is called (in C++).
