**Using the Application object**
--------------------------------

The Application class is the main entry in the client component of the
toolkit. It provides methods for initializing and terminating the
client, enabling tracing and adding Session objects for starting the
communication with a Data Access or an Alarms and Events server.

The Application class is designed using the Singleton pattern, therefore
the OPC Client Application instance is unique without providing the
possibility to create other instances. In order to get an instance of
this class the static property **Instance** is used for .NET and the
method **getApplication** is used for C++.

Note
~~~~

::

   The OPC Client application instance is created by the very first call of the getApp() function (in C++) respectively 
   Application.Instance property usage in .NET. The **releaseApplication** method must be called to release all the 
   resources allocated during runtime. After releaseApp() has been called, getApp() should never be called. This will 
   create a new instance of the Application object which is not desirable. For .NET the GC is responsible for destroying 
   the Instance object.

After getting the application instance, the next step is initializing
the application. After this, the desired operations must be performed
and, in the end, the application must be terminated. Terminating
application does the release of all the internal resources of the
Softing Toolkit.

Example
~~~~~~~

The following example shows how to get the application instance,
initialize and, in the end, terminate the application. ### C#

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...
   // gets the application instance
   Application application = Application.Instance;        

   // initializes the application
   application.Initialize();

   // do some work here

   // terminates the application
   application.Terminate();
   ...

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...
   'gets the application instance
   Private m_instance As Application = Application.Instance    

   'initializes the application
   m_instance.Initialize

   'do some work here


   'terminates the application
   m_instance.Terminate()
   ...

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...
   int _tmain(int argc, _TCHAR* argv[]) {

       // gets the application instance
       Application* application = getApplication();

       // initializes the application
       application->initialize();

       // do some work here

       // terminates the application
       application->terminate();

       // release all the resources used by the application    
       releaseApplication();        
   }
