**AE Filters**
--------------

General considerations
~~~~~~~~~~~~~~~~~~~~~~

The Alarms and Events filters allow selecting which events (tracking or
simple) and which conditions (alarms) will be received by the OPC AE
Client and which ones will be ignored (filtered out). The OPC Alarms and
Events has 4 (four) filter categories which permit the OPC AE Client
application vendor to get the most out of the AE Client.

Softing OPC Toolkit provides a clean and impecable way of using these
filters in an OPC Client application. Although the OPC Foundation has
issued the OPC AE specifications, the filtering section is slightly
interpretable and each of the OPC Toolkits existent on the market
implements these AE filters in its own way.

The 4 OPC Alarms and Events filter categories are:

-  Area Filters;
-  Source Filters;
-  Category ID Filters;
-  Attributes Filters. ### Note

::

   The AE Alarms and AE Events will both be further referenced to simply as events, since the alarms are 
   specialized (extended) events. The difference between the alarms and events consists in the fact that the an 
   alarm has additional properties besides the ones an event has and also the alarm (condition) may have active 
   sub-conditions.

Area Filtering
~~~~~~~~~~~~~~

The AE Area Filters allow setting filters for the area (e.g. building,
floor, machine, process) which should fire the events. The OPC AE Server
will not notify the OPC AE Client regarding any fired events having the
area not included in the applied area filter.

Setting Area Filters
~~~~~~~~~~~~~~~~~~~~

::

   std::vector<tstring> areas;
   // populate the vector
   areas.push_back(_T("computer.mouse"));
   // etc
   areas.clear();
   subscription->setFilterAreas(areas);

Clearing Area Filters
~~~~~~~~~~~~~~~~~~~~~

::

   std::vector<tstring> areas;
   // make sure the areas vector is empty
   areas.clear();
   subscription->setFilterAreas(areas);

Note
~~~~

::

   ßIf no Area Filters are set, the AE Servers built with Softing OPC Toolkit will fire events from all the areas (no 
   Area Filters = events fired from any area will be send to the OPC AE Client).

Source Filtering
~~~~~~~~~~~~~~~~

The AE Source Filters allow setting filters for the source (e.g. door,
window, sensor1, reservoirLevel_a) which should fire the events. The OPC
AE Server will not notify the OPC AE Client regarding any fired events
having the source not included in the applied source filter. ### Setting
Source Filters

::

   std::vector<tstring> sources;
   // populate the vector
   sources.push_back(_T("computer.mouse.right button"));
   sources.push_back(_T("computer.clock.timer"));
   // etc.
   subscription->setFilterSources(sources);

Clearing Source Filters
~~~~~~~~~~~~~~~~~~~~~~~

::

   std::vector<tstring> sources;
   // make sure the vector is empty
   sources.clear();
   subscription->setFilterSources(sources);

.. _note-1:

Note
~~~~

::

   If no Source Filters are set, the AE Servers built with Softing OPC Toolkit will fire events from all the sources. 
   (no Source Filters = events fired from any source will be send to the OPC AE Client).

Category ID Filtering
~~~~~~~~~~~~~~~~~~~~~

The AE Category ID Filters allow setting filters for the category IDs
(e.g. fireAlarm, lowPressure, toxicGases) which should fire the events.
The OPC AE Server will not notify the OPC AE Client regarding any fired
events having the Category ID not included in the applied Category ID
filter.

Setting Category ID Filters
~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   std::vector<unsigned long> categoryIds;
   // populate the vector
   categoryIds.push_back(1); // time tick
   categoryIds.push_back(3); // mouse click
   // etc.
   subscription->setFilterCategories(categoryIds);

Clearing Category ID Filters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

::

   std::vector<unsigned long> categoryIds;
   // make sure the vector is empty
   categoryIds.clear();
   subscription->setFilterCategories(categoryIds);

.. _note-2:

Note
~~~~

::

   If no Category ID Filters are set, the AE Servers built with Softing OPC Toolkit will fire events from all the 
   categories (no Category ID Filters = fired events belonging to any category will be send to the OPC 
   AE Client).

Attributes Filtering
~~~~~~~~~~~~~~~~~~~~

The AE Attributes Filters allow setting filters for vendor-specific
attribute for the received events. ### Note

::

   The Attributes Filters will NOT prevent the OPC AE Server from sending fired events to the OPC AE Client, but 
   rather these filters will have the OPC AE Server decide which event attributes will be sent to the OPC AE Client 
   (besides the standard event attributes).

.. _note-3:

Note
~~~~

::

   The Attributes Filters have to be configured for each Category ID. This does not imply that a Category ID filter 
   has to be set, but is required as each Category ID may have different vendor-specific attributes.

For instance (Softing OPC Toolkit Demo Server`s):

-  event “mouse click” (category ID #3) has 2 attributes:

   -  “x position”
   -  “y position”

-  event (condition) “time slot” (category ID #2) has 3 attributes:

   -  “second”
   -  “start second”
   -  “end second” ### Setting Returned Attributes Filters \``\`
      std::vector<AeReturnedAttributes*> aeReturnedAttributes;
      std::vector attributeIds;

// create two separate Attribute Filters (for two Category IDs)
aeReturnedAttributes.assign(2, NULL); aeReturnedAttributes[0] = new
AeReturnedAttributes(); aeReturnedAttributes[1] = new
AeReturnedAttributes();

// first Attribute Filter // category ID: #3 (mouse click) // 2
attribute IDs: #5 (x position), #6 (y position)
aeReturnedAttributes[0]->setCategoryId(3); attributeIds.assign(2, 0);
attributeIds[0] = 5; attributeIds[1] = 6;
aeReturnedAttributes[0]->setAttributesIds(attributeIds);

// second Attribute Filter // category ID: #2 (time slot) // 3 attribute
IDs: #2 (second), #3 (start second), #4 (end second)
aeReturnedAttributes[1]->setCategoryId(2); attributeIds.assign(3, 0);
attributeIds[0] = 2; attributeIds[1] = 3; attributeIds[2] = 4;
aeReturnedAttributes[1]->setAttributesIds(attributeIds);

// set returned Attribute Filters
subscription->setReturnedAttributes(aeReturnedAttributes);

::

   ### Clearing Returned Attributes Filters

std::vector<AeReturnedAttributes*> aeReturnedAttributes; // make sure
the vector is empty aeReturnedAttributes.clear();
subscription->setReturnedAttributes(aeReturnedAttributes);

::

   ### Note

If no Attribute Filters are set, the AE Servers built with Softing OPC
Toolkit will return NO VENDOR-SPECIFIC ATTRIBUTES for the fired events
(no Attribute Filters = NO vendor-specific returned attributes for the
fired events sent to the OPC AE Client). \``\`
