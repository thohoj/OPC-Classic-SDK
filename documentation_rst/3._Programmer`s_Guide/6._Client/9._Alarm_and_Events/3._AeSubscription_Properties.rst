**AeSubscription Properties**
-----------------------------

The **AeSubscription** objects are used to monitor the event sources in
the server and inform the client of the events which have occurred. When
a new AeSubscription object is created it is responsible for monitoring
all the events in the server from the time it has been created.

A newly created AeSubscription object, added to an AeSession object, is
in DISCONNECTED state (see **EnumObjectState**), this meaning that no
monitoring of events allocated to the object is carried out and
therefore no event notifications are sent to the client. As a newly
created object, the AeSubscription object is created DISCONNECTED as
otherwise a large number of notifications could be sent.

After transferring the object to ACTIVATED state the event notification
will be sent to the client. The frequency with which notifications on
occurred events are sent is determined by the values of the buffer time
and max size. These values influence the behavior of the object and the
reaction time to be achieved.

Events are transferred to the client by means of callbacks. By setting
the **RequestedBufferTime** property (in .NET) or by using the
**getRequestedBufferTime**\ (in C++) of a AeSubscription object, the
client determines the buffer time, i.e. the time interval at which the
events are to be sent. A value of 100 ms determines that events that
have occurred are sent every 100 ms. All events that have occurred
before that time elapses are buffered until then.

Should many events occur simultaneously, which would indicate a number
of exceptions occurring in the process, their notification to the client
should be carried out much more quickly. By setting the value of
property **RequestedMaxSize** (in .NET) or using **setRequestedMaxSize**
method(in C++) the client can determine the max size, i.e. the length of
the event queue in the server in relation to the AeSubscription object.
A value of 5 would then determine that a notification is sent to the
client as soon as 5 events have arrived. This is done independently of
whether the buffer time has run out, and can happen after 50 ms for the
example above.

Which is the significance of the value 0 with these two parameters? A
buffer time of 0 determines that every event is transferred immediately
after it has occurred. A max size of 0 determines that every event is
transfer immediately after it has occurred.

With filters the client can assign events to the AeSubscription objects.
The client can query or can set the values of the filters. The following
filter criteria exist:

+-----------+-----------+-----------+-----------+-----------+-----------+
| **Filter  | **Get the | **Set the | **Get the | **Set the | **Obse    |
| c         | filter    | filter    | filter    | filter    | rvation** |
| riteria** | criteria  | criteria  | criteria  | criteria  |           |
|           | C++**     | C++**     | .NET**    | .NET**    |           |
+===========+===========+===========+===========+===========+===========+
| by low    | ge        | se        | FilterSe  | FilterSe  | A value   |
| severity  | tFilterSe | tFilterSe | verityLow | verityLow | of 0      |
|           | verityLow | verityLow |           |           | indicates |
|           |           |           |           |           | that      |
|           |           |           |           |           | events    |
|           |           |           |           |           | will all  |
|           |           |           |           |           | s         |
|           |           |           |           |           | everities |
|           |           |           |           |           | are to be |
|           |           |           |           |           | received, |
|           |           |           |           |           | even if   |
|           |           |           |           |           | high      |
|           |           |           |           |           | severity  |
|           |           |           |           |           | is 1000.  |
+-----------+-----------+-----------+-----------+-----------+-----------+
| by high   | get       | set       | FilterSev | FilterSev | - none -  |
| severity  | FilterSev | FilterSev | erityHigh | erityHigh |           |
|           | erityHigh | erityHigh |           |           |           |
+-----------+-----------+-----------+-----------+-----------+-----------+
| by event  | g         | s         | FilterE   | FilterE   | - none -  |
| type      | etFilterE | etFilterE | ventTypes | ventTypes |           |
|           | ventTypes | ventTypes |           |           |           |
+-----------+-----------+-----------+-----------+-----------+-----------+
| by event  | g         | s         | FilterC   | FilterC   | - none -  |
| category  | etFilterC | etFilterC | ategories | ategories |           |
|           | ategories | ategories |           |           |           |
+-----------+-----------+-----------+-----------+-----------+-----------+
| by areas  | getFi     | setFi     | Fi        | Fi        | If it is  |
|           | lterAreas | lterAreas | lterAreas | lterAreas | not set   |
|           |           |           |           |           | all areas |
|           |           |           |           |           | are to be |
|           |           |           |           |           | included. |
+-----------+-----------+-----------+-----------+-----------+-----------+
| by        | getFilt   | setFilt   | Filt      | Filt      | If it is  |
| sources   | erSources | erSources | erSources | erSources | not set   |
|           |           |           |           |           | all       |
|           |           |           |           |           | sources   |
|           |           |           |           |           | are to be |
|           |           |           |           |           | included. |
+-----------+-----------+-----------+-----------+-----------+-----------+

If multiple criteria are specified only those events satisfying all
criteria will be selected.

Note
~~~~

::

   Setting new parameters for a filter will overwrite the initial conditions. To avoid this, before setting additional 
   conditions, retrieve the existing conditions (e.q. getFilterAreas) in a datatype (i.e. areas), add other filter criteria in 
   the datatype (i.e. areas.push_back("AnotherArea"); then set the resulting critery (e.q. setFilterAreas).

Besides the mandatory attributes for the event notification, the client
can also request the addition of further optional attributes. These
optional attributes can be set using the **ReturnedAttributes** property
(in .NET) or **setReturnedAttributes** method(in C++). By using the
**ReturnedAttributes** property (in .NET) or **getReturnedAttributes**
method(in C++), the client can query for the optional attributes which
have to be sent with the event notification.

For a detailed example of how to use the properties and methods
described above for getting and setting a subscription’s attributes,
check the **AeObjectAttributes** example.
