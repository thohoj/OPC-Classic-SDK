**Step 2 - Customizing the Application**
----------------------------------------

The next steps will explain the structure of the supplied project and
will tell you how to extend its functionality.

This part describes how to add application-specific implementations.

Microsoft Visual Studio 2003, 2005, 2008 and 2010
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the installed tutorial, the paths for the Include and Library files
have been set according to the directory structure of the installation.
If you have changed this structure or want to generate the tutorial in a
different directory, you have to change the settings.

You will find the corresponding forms in the figures below.

Please make sure that you choose “All configurations” when setting the
directories for the header files. You will reach the forms via the menu
item Project->Properties.

Bild
====

.. _bild-1:

Bild
====

Brief explanation on the generated classes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The generated project contains 3 classes: **MyAeSession**,
**MyAeSubscription** and **OpcClient**. The first two classes are
defined only using a header file and for the last one a header and a
source file exists. The name of the header and source files coincide
with the class name.

The first two classes represent OPC objects: session and subscription
and can be extended to add extra functionality to the generated project.

The **OpcClient** class contains a small number of methods that are
needed to create a functional OPC client. It has methods for
initializing (**initialize**) and terminating (**terminate**) the
application, tracing the application (**trace**), processing CommandLine
(**processCommandLine**) and setting the service name in case the OPC
client needs to be run as a service **setServiceName**. The other
methods are used for creating and initializing OPC objects
(**initializeAeObjects**) and for getting the state of a given
condition.(**getConditionState**)

When running the project, an instance of the **OpcClient** class is
created and then the application is initialized. You can see this below:

::

   // create the OpcClient instance
   createOpcClient();
   OpcClient* pClient = getOpcClient();

   if(!SUCCEEDED(pClient->initialize()))
   {
       pClient->terminate();
       destroyOpcClient();

       CloseHandle(g_endEvent);
       return 1;
   }

After the application was succesfully initialized its time to create the
OPC objects. This is done by calling the **initializeAeObjects** method.
It creates a session and a subscription object and then connects them.

In this moment operations on the created objects can be performed. e.g
getting the state of a given condition state, receiving events…

How to do this you can see in the next step.
