**OPC XML Data Access**
-----------------------

Work on OPC XML DA started in the year 2000 with the aim to integrate
Microsoft’s XML activities into OPC. This objective has been extended to
allow the use of the specification independently of the computer
platform and computer location.

OPC XML DA products can be used both across an intranet and the
Internet. At the same time, implementations for different environments
are possible. The prerequisite is that HTTP and XML support is
available.

In view of these requirements, it soon became clear that the model
devised by the OPC DCOM DA specification could not be adopted
one-to-one.

-  An object hierarchy (OPCServer, OPCGroup, OPCItem) was defined in OPC
   DCOM DA. In a heterogeneous world, one cannot assume that the
   corresponding object models can be implemented in all computers. This
   is also true for launching and terminating servers as well as for
   finding them. OPC DCOM provides DCOM-specific solutions to these
   tasks or uses DCOM directly. With OPC XML, different, generally
   applicable solutions need to be found.

-  Transmitting data via XML is less efficient than transmitting binary
   data, as permitted by DCOM. Therefore, the client must be allowed to
   choose between the amount of information and the transmission
   performance. The OPC DCOM DA interface features a multitude of
   methods. To enhance efficiency, it is useful to combine multiple
   methods.

-  OPC DCOM DA defines callbacks. This definition, too, is subject to
   prerequisites which do not necessarily exist in that way in the
   surroundings of the Web services. HTTP is a stateless protocol. The
   server has no permanent knowledge of the client. Even though HTTP
   extensions which allow saving the corresponding knowledge do exist,
   these extensions in HTTP might not always be supported. As explained
   above, it cannot be assumed that the servers (and clients) always
   implement object models. Hence, the end points for callbacks might
   not exist, either.

-  The DCOM-based OPC world provides the server enumerator which a
   client may use to get an overall view of the existing OPC servers. A
   similar infrastructure is not (yet) available for finding OPC XML DA
   services.

The following sections deal with the methods listed in the following
table.

========================= ==========================================
Function                  Description
========================= ==========================================
GetStatus                 Get the server status
Browse                    Browse the name space
GetProperties             Get values of properties
Read                      Read data
Write                     Write data
Subscribe                 Create a subscription
SubscriptionCancel        Remove a subscription
SubscriptionPolledRefresh Get the changed values of the subscription
========================= ==========================================

The GetStatus call can be used to check whether the OPC XML DA service
is available. When the client receives a corresponding response, it
knows that the service is available. The client can also use this call
to query information about the service.

An OPC XML DA service also contains the name spaces of all variables to
which the client has read and/or write access. The majority of methods
from OPC DCOM DA for browsing the name space have been combined into one
method. A call for a client browse process is available. The service
responds by a BrowseResponse. The client can set filters, the maximum
number of items to be returned and, in the case of repeated calls, the
points for starting and resuming browsing.

By calling GetProperties, the client can query values for the
properties. The BrowseResponse returns the information on the existing
properties to the client.

After the client has browsed the name space, it can read and write
values. It directly passes the complete ItemIdentifier for the required
variable.

By setting MaxAge, the client specifies, in the read request, a limit on
a value’s age. The mode of functioning is comparable with the difference
between CACHE read and DEVICE read. If the value is sufficiently
up-to-date, the service will return a stored value. If the value is
older than MaxAge, it will request a new value and pass it to the
client. A service which persistently stores values without using calls
or stores values independently of calls, will always refresh the value.

The behaviour when writing data can be compared with the behaviour when
reading. The client passes the complete ItemIdentifier and the value to
be written. The service transmits the value and returns the result to
the client. Besides the value, the client can also write the time stamp
and the quality information and read back the value.

The specification also provides for the possibility of subscription. Web
services do not support callbacks. For this reason, a different method
had to be found.

To set up a subscription, the client transmits a request. The request
specifies the variables which the client is interested in. Values can be
specified for RequestedSamplingRate, Deadband and EnablingBuffering, for
example. RequestedSamplingRate corresponds to the UpdateRate of OPC DCOM
DA. The EnableBuffering parameter has the following meaning: The client
can retrieve the values of the callback less often than possible with
RequestedSamplingRate. This means that the server acquires values more
often than the client retrieves them. If the newly acquired values in
the server change and EnableBuffering=TRUE, the server will save the
values and pass them to the client with the next call.

The SubscriptionPingRate is a timeout defined by the client. This
timeout is monitored by the service. If the client does not perform the
calls for retrieving the values faster than the SubscriptionPingRate,
the server will cancel the subscription. With the callback rate, the
client informs the server of the frequency at which the client will
retrieve the acquired values.

The service responds by a SubscriptionResponse containing the handle for
the callback and the supported callback rate as well as the available
item values.

A subscription is canceled by the client with SubscriptionCancelRequest.
The service responds by SubscriptionCancelResponse.

Retrieving the data for a subscription is initiated by the client. It
calls SubscriptionPolledRefresh and receives the data through
SubscriptionPolledRefreshResponse. In the request, the client can tell
the service how long it will wait for the response and thus determine
that the connection will be open for a specific period of time. The
sequence is illustrated in Fig. 24. Presetting the values for HoldTime
and WaitTime allows reproducing the behavior during the automatic
transmission of the values from the server to the client. The service
waits for at least the HoldTime before sending the response. If the
values do not change during HoldTime, the service will continue to wait.
This is where WaitTime is taken into account. In this case, however, the
service transmits the response immediately to the client when a change
is detected. That closes the cycle. If no change occurs during WaitTime,
either, an empty response is transmitted on expiration of this period of
time.
