**Step 2 - Customizing the Application**
----------------------------------------

The next steps will explain the structure of the supplied project and
will tell you how to extend its functionality.

This part describes how to add application-specific implementations.

Microsoft Visual Studio 2003, 2005, 2008 and 2010
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the installed tutorial, the paths for the Include and Library files
have been set according to the directory structure of the installation.
If you have changed this structure or want to generate the tutorial in a
different directory, you have to change the settings.

You will find the corresponding forms in the figures below.

Please make sure that you choose “All configurations” when setting the
directories for the header files. You will reach the forms via the menu
item **Project->Properties**.

Bild
====

.. _bild-1:

Bild
====

Brief explanation on the generated classes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The generated project contains 3 classes: **MyCreator**,
**MyAeAddressSpaceElement** and **OpcServer**. The first two classes are
defined only using a header file and for the last one a header and a
source file exists. The name of the header and source files coincide
with the class name.

**MyCreator** class is used to create OPC server specific objects and
**MyAeAddressSpaceElement** class is used for creating the objects that
will form the server’s area space.

The **OpcServer** class contains a small number of methods that are
needed to create a functional OPC server. It has methods for
initializing (**initialize**), preparing (**prepare**), starting
(**start**), stopping (**stop**) and terminating (**terminate**) the
server application. The other methods are for tracing the server
application (**trace**), processing CommandLine (**processCommandLine**)
and setting the service name (**setServiceName**) that is used when the
project needs to be run as a service. Three other methods exist: one for
building the area space (**buildNameSpace**), one for building the event
space (**buildEventCategories**) and one that fires generated events
(**fireSimulationEvents**).

When running the project, an instance of the **OpcServer** class is
created and then the application is initialized. You can see this below:

::

   // create and initialize the OpcServer instance
   createOpcServer();
   OpcServer* pServer = getOpcServer();
   pServer->initialize();

After the application was succesfully initialized its time to prepare
the application and then register the current server:

::

   // provide the server with the proper custom creator
   MyCreator creator;
   if (!SUCCEEDED(pServer->prepare(&creator)))
   {
       pServer->terminate();
       destroyOpcServer();

       CloseHandle(g_endEvent);
       return 1;
   }

   // handle the command line arguments (register/unregister, etc)
   tstring commandLine(GetCommandLine());
   result = pServer->processCommandLine(commandLine);

If everything is successful then the server application is started. In
this step building the area space and event space is skipped. The next
step will show how to build them.
