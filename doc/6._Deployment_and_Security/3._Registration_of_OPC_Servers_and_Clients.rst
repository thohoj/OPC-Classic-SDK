**Registration of OPC Servers and Clients**
-------------------------------------------

After deploying an OPC DA/AE Server (or any OPC Client or OPC Server
which has a Windows Service architecture) it is required for it to be
registered. Registration is performed by invoking the server (or client)
executable with the **-RegServer** command-line parameter:

::

   <YourApplication>.exe -RegServer

To unregister the OPC DA/AE Server (or any OPC Client / OPC Server if
Windows Service), use the **-UnRegServer** parameter:

::

   <YourApplication>.exe -UnRegServer

Note
~~~~

::

   Please make sure the OPC DA/AE Server (or any OPC Client / OPC Server if Windows Service) is unregistered before being removed from the target deployment system. Not unregistering the OPC Client / Server will make Windows keep an invalid reference to a DCOM Component and - if the case - also to a Windows Service.

Softing OPC Toolkit Core performs both the registration and the
unregistration of any OPC DA/AE Server (or any OPC Client / OPC Server
if Windows Service), both as a Windows DCOM Component and as a Windows
Service in a single API method call.

The registration of the OPC DA/AE Server (or any OPC Client / OPC Server
if Windows Service) performs the registration operation in Windows
Registry at two separate levels:

-  DCOM registration for OPC Servers
-  Windows Service registration

DCOM registration for OPC Servers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The deployed OPC DA/AE Server application has to be registered with
Windows DCOM in order to allow OPC DA/AE Clients to connect to it and to
exchange data with it. ### Note

::

   Registering an OPC DA/AE Server requires administrative priviledges. Please make sure the deployment 
   process has the appropriate rights in perfroming the registration actions.

The registration process, although complex, is performed by the OPC
Toolkit with the least possible effort from the development side. All
that has to be done in the OPC Server application`s code is to have the
OPC Toolkit Server Application to process the command line: ### Note

::

   Pure XML-DA OPC Servers do not require to be registered as Windows DCOM components.

.. _note-1:

Note
~~~~

::

   In order for the OPC XML-DA Servers to operate, they need that the port which is used to be added to Windows 
   Firewall exception list. Please see [Windows Firewall rule for XML-DA Servers](e91863c5-d25f-43f1-99fc-c79f1ad7e936.htm) chapter for more details on this 
   subject.

C
~

::

   // Configure the OPC Server Application object
   Application.Instance.VersionOtb = ...;
   Application.Instance.AppType = ...;
   ...

   // Activate licenses
   int result = Application.Instance.Activate(...);
   if (result != (uint)EnumResultCode.S_OK)
   {
     // failed to activate license
     ...
     return result;
   }
   ...

   // Initialize the OPC Server Application
   result = Application.Instance.Initialize(...);
   if (result != (uint)EnumResultCode.S_OK)
   {
     // application failed to initialize
     ...
     return result;
   }

   // Process the command line
   string commandline = Environment.CommandLine;
   result = Application.Instance.ProcessCommandLine(...);

   if (result != (uint)EnumResultCode.S_OK)
   {
     if (result == (uint)EnumResultCode.S_FALSE)
     {
       // registration operation succesful
     }
     else
     {
       // registration operation failed
     }

     // no matter what, close the application if ProcessCommandLine
     // returned something different than S_OK
     Application.Instance.Terminate();
     server = null;
     return result;
   }

VB .NET
~~~~~~~

::

   ' Configure the OPC Server Application object
   Application.Instance.VersionOtb = ...
   Application.Instance.AppType = ...
   ...

   ' Activate licenses
   Dim result As Integer
   result = Application.Instance.Activate(...)
   If result <> EnumResultCode.S_OK Then
     ' failed to activate license
     ...
     Return result
   End If
   ...

   ' Initialize the OPC Server Application
   result = Application.Instance.Initialize(...)
   If result <> EnumResultCode.S_OK Then
     ' application failed to initialize
     ...
     Return result
   End If

   ' Process the command line
   Dim commandline As String = Environment.CommandLine
   result = Application.Instance.ProcessCommandLine(...)

   If result <> EnumResultCode.S_OK Then
     If result = EnumResultCode.S_FALSE Then
       ' registration operation succesful
     Else
       ' registration operation failed
     End If

     ' no matter what, close the application if ProcessCommandLine
     ' returned something different than S_OK
     Application.Instance.Terminate()
     server = Nothing
     Return result
   End If

.. _c-1:

C++
~~~

::

   // Configure the OPC Server Application object
   Application.Instance().setVersionOtb(...);
   Application.Instance().setAppType(...);
   ...

   // Activate licenses
   int result = Application.Instance().activate(...);
   if (result != (uint)EnumResultCode_S_OK)
   {
     // failed to activate license
     ...
     return result;
   }
   ...

   // Initialize the OPC Server Application
   result = Application.Instance().initialize(...);
   if (result != (uint)EnumResultCode.S_OK)
   {
     // application failed to initialize
     ...
     return result;
   }

   // Process the command line
   tstringstream strStream;
   for (int i = 1; i <= argc; ++i)
   {
     strStream << argv[i];
   }
   tstring commandline = strStream.str();
   result = Application.Instance().processCommandLine(commandline);

   if (result != (uint)EnumResultCode_S_OK)
   {
     if (result == (uint)EnumResultCode_S_FALSE)
     {
       //registration operation succesful
     }
     else
     {
       // registration operation failed
     }

     // no matter what, close the application if processCommandLine
     // returned something different than S_OK
     Application.Instance().terminate();
     releaseApp();
     return;
   }

.. _note-2:

Note
~~~~

::

   The OPC XML-DA Servers do not register with DCOM. Issuing the **-RegServer** command line parameter will 
   perform no system modification (unless the respective OPC XML-DA Server implements a Windows Service 
   architecture).

The Windows Registry keys created by the OPC DA/AE Server registration
process are:

-  OPC DA entries

   -  HKCR<Version-Independent-ProgID-DA>
   -  HKCR<Version-Dependent-ProgID-DA>
   -  HKCR[Wow6432Node]:raw-latex:`\CLSID`<CLSID-DA>
   -  HKCR:raw-latex:`\AppID`<CLSID-DA>

-  OPC AE entries

   -  HKCR<Version-Independent-ProgID-AE>
   -  HKCR<Version-Dependent-ProgID-AE>
   -  HKCR[Wow6432Node]:raw-latex:`\CLSID`<CLSID-AE>
   -  HKCR:raw-latex:`\AppID`<CLSID-AE> ### Note

   ::

      HKCR stands for HKLM\SOFTWARE\Classes.

.. _note-3:

Note
~~~~

::

   The Wow6432Node registry path will only be used by x86 OPC Server applications on x64 Windows operating 
   systems.

Windows Service registration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The Windows Service registration will also be performed by the Softing
OPC Toolkit Core for each OPC Client / Server that implements a Windows
Service architecture, independent of the Windows DCOM registration.

Signaling that an OPC Client / Server application is a Windows Service -
so that the Softing OPC Toolkit will perform the service registration -
is done by setting the Application.ServiceName property, respectively by
calling the Application.Instance().setServiceName(tstring) method (a
Windows Service with an emtpy name is not valid).

The deployed OPC Client / Server applications which are Windows Services
by design must be registered as Windows Services for them to properly
function.

.. _note-4:

Note
~~~~

::

   Registering a Windows Service requires administrative priviledges. Please make sure the deployment process 
   has the appropriate rights in perfroming the registration actions.

.. _note-5:

Note
~~~~

::

   Although pure XML-DA OPC Clients and Servers will not be registered as Windows DCOM components, they will 
   be registered as Windows Services by the Toolkit Core if a valid service name is set through the service name 
   property / method.

.. _c-2:

C
~

::

   // Configure the OPC Server Application object
   [...]
   Application.Instance.ServiceName = "My OPC Service";
   [...]
   // Activate licenses
   [...]
   // Initialize the OPC Server Application
   [...]
   // Process the command line
   [...]
   // see "DCOM registration for OPC Servers" section above for the entire sample

.. _vb-.net-1:

VB .NET
~~~~~~~

::

   ' Configure the OPC Server Application object
   [...]
   Application.Instance.ServiceName = "My OPC Service"
   [...]
   ' Activate licenses
   [...]
   ' Initialize the OPC Server Application
   [...]
   ' Process the command line
   [...]
   ' see "DCOM registration for OPC Servers" section above for the entire sample

.. _c-3:

C++
~~~

::

   // Configure the OPC Server Application object
   [...]
   Application.Instance().setServiceName(_T("My OPC Service"));
   [...]
   // Activate licenses
   [...]
   // Initialize the OPC Server Application
   [...]
   // Process the command line
   [...]
   // see "DCOM registration for OPC Servers" section above for the entire sample

The Windows Registry key created by the OPC Client/Server registration
process for a Windows Service is:

-  HKLM:raw-latex:`\SYSTEM`:raw-latex:`\CurrentControlSet`:raw-latex:`\services`<Service-name>
