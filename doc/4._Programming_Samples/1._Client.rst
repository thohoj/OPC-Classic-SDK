**Client**
----------

Samples location
~~~~~~~~~~~~~~~~

You will find all the samples in the following directories:

Windows C++ samples:
~~~~~~~~~~~~~~~~~~~~

:raw-latex:`\Softing`:raw-latex:`\OPCToolkit`:raw-latex:`\V`44x:raw-latex:`\Windows`:raw-latex:`\C`++:raw-latex:`\samples`:raw-latex:`\client`

Windows .Net samples:
~~~~~~~~~~~~~~~~~~~~~

:raw-latex:`\Softing`:raw-latex:`\OPCToolkit`:raw-latex:`\V`44x:raw-latex:`\Windows`:raw-latex:`\NET`:raw-latex:`\samples`:raw-latex:`\client`

In each sample’s folder there are seven projects: one for Visual Studio
2003, one for Visual Studio 2005, one for Visual Studio 2008, one for
Visual Studio 2010, one for Visual Studio 2012, one for Visual Studio
2013, one for Visual Studio 2015 and one for Visual Studio 2017. Before
switching from one of these projects to the other one (e.g. from VS2008
to VS2012), please make sure that the obj directory (that is
automatically created when a project is compiled) gets deleted. All the
samples use the *“OPC Toolkit Demo Server”*. Also, all the solutions
share the same source files, therefore any performed modifications will
be visible for all Visual Studios.

AEBrowse
~~~~~~~~

This example shows how to synchronously browse an Alarms and Events
Server’s address space. The address space is always hierarchical and
describes the areas in which the events may occur as well as the sources
of the events. The example will show the hierarchical structure of the
address space.

The example also shows how to query the conditions associated with a
source. For sources that have conditions associated with them, the
conditions will be displayed as well.

For further information related to this topic see `Browse an Alarms and
Events Server’s address
space <a81fc05b-1cc6-4c97-a95d-02df980497e1.htm>`__. ### AE Condition

This example shows how to display the condition list of an
AeSubscription object. For each condition-related event in the list the
following information will be displayed: state, source, name, severity,
message, the time the condition-related event occurred, the identifier
of the condition acknowledger (if the condition is not acknowledged this
field is empty) and the name of the condition’s active subcondition.

The conditions in the condition list can be acknowledged, enabled or
disabled by pressing the corresponding buttons in the up right. These
operations apply for all the conditions in the condition list. For
details about acknowledging and enabling or disabling events see
`Acknowledging and enabling/disabling
events <4a44dad6-e530-4fd3-beb1-05044b3dc778.htm>`__.

To get information on the condition’s state press the GetConditionState
button. When this button is pressed the state of the current selected
subscription will be displayed at the bottom of the page.

For further details related to this topic see `AeConditions
list <4998d6ec-0c5c-4665-83e9-7c9f93ad4922.htm>`__, `Refreshing
condition-related events <a6cdfff6-eae6-4900-87d1-253148ddd4de.htm>`__.
### AEConsole

This example shows how to connect, activate and disconnect Alarms and
Events objects. For details about connecting, activating and
disconnecting objects, see `Object
states <a8025f60-ae57-4a39-8620-74379c3962a7.htm>`__.

In any moment the status of the server can be displayed by choosing the
corresponding option from the menu displayed on the screen.( see `Get
server status <b42eb817-a306-4bf8-a0a0-7b7f4dc11684.htm>`__).

Also the example shows how the client can be notified by the server
about the events that occur in the server’s eventarea.

All the operations enumerated above are done both synchronously and
asynchronously.

The example presents how the connection monitor can be activated or
deactivated. ### AEEventTypes

This example shows how to get the event categories an Alarms and Events
Server supports. For each event category the attributes and name of the
conditions associated with it will be returned. For all the conditions
the active subconditions are returned.(see `Browse an Alarms and Events
Server’s address space <a81fc05b-1cc6-4c97-a95d-02df980497e1.htm>`__)

All the operations mentioned above are done synchronously.

In the end, the example shows how to query for the filter criteria
available in the server’s filter space.

AEObjectAttributes
~~~~~~~~~~~~~~~~~~

This example shows how to synchronously get and set the attributes of
the AeSession and AeSubscription objects and display them on the screen.

For further details on this topic see `Update object
attributes <09c0b309-5806-4e0b-877f-6c4cc9e6b3d4.htm>`__.

AEQuerySourceConditions
~~~~~~~~~~~~~~~~~~~~~~~

This example shows how to query the conditions associated with a source.
The source is identified by its path in the server’s eventarea.

The operation is done both synchronously and asynchronously.

ClientDLL
~~~~~~~~~

This example shows how to create a project that uses the DLL resulted
after compiling a Project Wizard generated Library Application.

Two project files are created, each being placed in a different folder.

First one, placed in the OpcProject folder, represents the Library
Application generated using the **Project Wizard**. After compiling it a
DLL will result. The DLL exposes two methods: Start and Stop.

Second one, placed in the TestDll folder, represents the project that
loads the previously created library. After loading the library, the
Start and Stop methods are called. Calling Start method, will initialize
the client application and create a DaSession and an AeSession objects.
Periodically an item will be read using the DaSession object and the
read value will be written in the ClientDll.txt file. Also, using the
AeSession object, a condition state will be periodically written in the
same file. Using Stop method, all the created objects will be removed
from the application and the application will be terminated. ### Note

::

   In order to make the TestDll project work, copy the OpcProjectX.dll in the folder where the TestDll.exe is 
   placed.

DABrowse
~~~~~~~~

This example shows how to synchronously browse a Data Access Server’s
address space. The example can be used for browsing the Data Access
servers that support **Data Access V3.0** OPC specification. The address
space contains all data sources and data sinks made available by that
server.

For further details on this topic see `Browsing a Data Access Server’s
address space. <358c58f2-508a-46f8-8ff4-081f8e838ad5.htm>`__

DABrowse_DA20
~~~~~~~~~~~~~

This example shows how to synchronously browse a Data Access Server’s
address space. The example can be used for browsing the Data Access
servers that support **Data Access V2.0** or less as well as the ones
that support **XML-DA V1.0** OPC specification.

To support interoperability, a workaround that hides erroneous behaviour
of servers created with the Rockwell Toolkit can be activated.
Therefore, the ForceBrowseUp property (.NET) / setForceBrowseUp() method
(C++) has to be set to (.NET) / called with (C++) “true” before each
call of the browse method. See also
`Troubleshooting <0bae54da-dc3b-485b-9f6b-e4fb0748d790.htm>`__ section.

For further details on this topic see `Browsing a Data Access Server’s
address space. <358c58f2-508a-46f8-8ff4-081f8e838ad5.htm>`__

DAConsole
~~~~~~~~~

This example shows how to connect, activate and disconnect Data Access
objects. For details about connecting, activating and disconnecting
objects, see `Object
States <a8025f60-ae57-4a39-8620-74379c3962a7.htm>`__.

The items can be read and written using session or subscription objects.
The sample shows how to do this in a synchronously or asynchronously
way. For further information on how to read and write items see `Reading
and writing values <e0b47f54-7b1a-4cf9-b5db-a4475d6e6229.htm>`__.

In any moment the status of the server can be displayed by choosing the
corresponding option from the menu displayed on the screen.( see `Get
server status <b42eb817-a306-4bf8-a0a0-7b7f4dc11684.htm>`__).

Also the example shows how the client can be notified by the server
about the value changes for the items that belong to a specific
subscription.

All the operations enumerated above are done both synchronously and
asynchronously.

The example presents how the connection monitor can be activated or
deactivated.

The example presents how to modify the data retrieval mode. There are
three data retrieval modes: POLLEDREFRESH (XML-DA only), SYNCREAD and
ASYNCADVISE (DCOM only). For XML-DA, the default data retrieval mode is
POLLEDREFRESH, and for OPCDA the default data retrieval mode is
ASYNCADVISE. SYNCREAD is recommended when there are problems on DCOM and
the server has no rights to invoke callbacks on the client (Failed to
advise IOPCDataCallback connection (0xE00004B3)), as ASYNCADVISE uses
callbacks.

DAConsole_Service
~~~~~~~~~~~~~~~~~

This example shows how to build a Data Access client as Windows Service.
When the service is started, a DaSession oject, a DaSubscription and
four DaItems objects are created and activated. Each time a DataChange
callback comes, the values it brings are written in the
C::raw-latex:`\Service`\_TraceData.txt file. When the service is
stopped, all the created objects are disconnected and the application is
terminated.

DAGetProperties
~~~~~~~~~~~~~~~

This example shows how to query the properties of an
AddressSpaceElement. The properties (represented by DaProperty objects)
are allocated to nodes and leaves. The name of a manufacturer of a
device, for example, can be mapped to a property.

For further details on this topic see `Browsing a Data Access Server’s
address space. <358c58f2-508a-46f8-8ff4-081f8e838ad5.htm>`__

DAObjectAttributes
~~~~~~~~~~~~~~~~~~

This example shows how to synchronously get and set the attributes of
the DaSession, DaSubscription and DaItem objects and display them on the
screen.

For further details on this topic see `Update object
attributes <09c0b309-5806-4e0b-877f-6c4cc9e6b3d4.htm>`__.

DataControl
~~~~~~~~~~~

This example shows how to use the DataControl.

Before using it, it must be configured. The current configuration is:

The session object is represented by the “Softing OPC Toolkit OPC Demo
DA Server” that has 2 subscriptions added to it. First one is called
“Subscription1” and has the update rate of 1000 ms and the second one is
called “Subscription2” and has an update rate of 5000 ms. To the first
subscription the following items were added: “increment.UI1”,
“increment.DATE”, “increment.BSTR array”. To the second subscription
belong the “maths.sin” and “time.local.second” items.

Five TextBox controls are bound to the data control configured as
mentioned above. Each TextBox will display the value of an item from the
ones mentioned above. The sample shows how the data binding is done.

The example also shows how to receive notifications when the items
belonging to the subscription change their values.

For further details on how to configure, start, stop, do data binding
and receive data changed notifications, see `Data
Control <50ccad17-45de-44fc-ad34-941c07cd6e48.htm>`__.

OPCEnumerate
~~~~~~~~~~~~

This example shows how a client can inform itself of OPC servers that
support Data Access or Alarms and Events Specifications and are located
on the local computer or on other remote computers.

The found servers will be grouped accordingly to the OPC specification
they support. (DA_V1.0, DA_V2.0, DA_V3.0 or AE_V1.0)

For each found server the following information will be given:

-  the server’s description

-  the server’s CLSID

-  the server’s ProgID

-  the server’s version independent ProgID

Selecting a server will determine its URL to be displayed in the TextBox
control from the bottom of the page.

The operations are executed synchronously.

For further details see `Enumerate servers installed on a
station <ec342531-54f7-441e-95ed-b6e5068d7edb.htm>`__.
