**Acknowledging and enabling/disabling events**
-----------------------------------------------

The **eventarea** is a form of structuring events. It is used for
topographic organization of events. The nodes of the eventarea describe
areas in which events may occur. The leaves describe event sources. One
event source can make available several events.

The client has the possibility to switch on monitoring of
condition-related events for an area or a source of the eventarea. This
can be done using the methods **EnableAeConditionsByArea** and
**EnableAeConditionsBySource**\ (.NET) and
**enableAeConditionsBySource** and **enableAeConditionsByArea**\ (C++)
of an AeSession object having the second parameter set to true.

Also the possibility to switch off monitoring of condition-related
events for an area or a source exists, by using the methods mentioned
above but with the second parameter set to false.

While a condition-related event is disabled, no event notification will
be generated for it and it can’t be acknowledged. Even on a refresh no
event notification will be generated for disabled conditions.

Enabling/disabling condition-related events can be done both
synchronously and asynchronously. The **ExecutionOptions** parameter
permit specifying the way the operation is performed.

Example 1
~~~~~~~~~

The following example shows how to synchronously enable events for a
source named “computer.clock.time slot 1”. The source belongs to the
*Softing OPC Toolkit OPC AE Demo Server*\ ’s eventarea.

For a more detailed example on this topic check the AeCondition example.

C
~

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...
   // gets the application instance
   Application application = Application.Instance;

   // initializes application
   application.Initialize();

   // creates a new AeSession object and adds it to the application
   AeSession session = new AeSession("opcae:///Softing.OPCToolboxDemo_ServerAE.1/{2E565243-B238-11D3-842D-0008C779D775}");

   ExecutionOptions executionOptions = new ExecutionOptions();

   // connects AeSession object
   session.Connect(true, true, executionOptions);                    

   // switch on monitoring condition - related events
   session.EnableAeConditionsBySource(new string[] {"computer.clock.time slot 1"},
                      true,
                      executionOptions);
   ...

   // disconnects session
   session.Disconnect(executionOptions);

   // removes the added session
   application.RemoveAeSession(session);

   // terminates the application
   application.Terminate();
   ...

VVB .NET
~~~~~~~~

::

   Imports Softing.OPCToolbox
   Imports Softing.OPCToolbox.Client

   ...
   'gets the application instance
   Dim application As Application = Application.Instance

   'initializes application
   application.Initialize()

   'creates a new AeSession object and adds it to the application
   Dim session As AeSession = new AeSession("opcae:///Softing.OPCToolboxDemo_ServerAE.1/{2E565243-B238-11D3-842D-0008C779D775}")

   Dim executionOptions As New ExecutionOptions()

   'connects AeSession object
   session.Connect(True, True, executionOptions)                

   'switch on monitoring condition - related events
   session.EnableAeConditionsBySource(New String() {"computer.clock.time slot 1"}, _
                      True, _
                      executionOptions)
   ...

   'disconnects session
   session.Disconnect(executionOptions)

   'removes the added session
   application.RemoveAeSession(session)

   'terminates the application
   application.Terminate();
   ...

.. _c-1:

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...
   int _tmain(int argc, _TCHAR* argv[])
   {    
       // by default, the execution is synchronous
       ExecutionOptions executionOptions;

       // gets the application instance
       Application* application = getApplication();

       // initializes application
       application->initialize();

       // creates a new AeSession object and adds it to the application
       AeSession* session = = new AeSession(_T("opcae:///Softing.OPCToolboxDemo_ServerAE.1/{2E565243-B238-11D3-842D-0008C779D775}"));        

       // connects AeSession object
       session->connect(TRUE, TRUE, &executionOptions);    

       std::vector<tstring> sources;
       sources.push_back(_T("computer.clock.time slot 1"));

       // switch on monitoring condition - related events
       session->enableAeConditionsBySource(sources,
                       true,
                       &executionOptions);
       ...

       // disconnects session
       session->disconnect(&executionOptions);

       // removes the added session
       application->removeAeSession(session);

       // terminates the application
       application->terminate();    

       // releases the resources used by application
       releaseApplication();

       delete session;                
       ...
   }

Example 2
~~~~~~~~~

The following example shows how to asynchronously disable events for a
source named “computer.clock.time slot 1”. The source belongs to the
*Softing OPC Toolkit OPC AE Demo Server*\ ’s eventarea. ### C#

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...

   private void HandleEnableAeConditionsBySourceCompleted (
       AeSession anAeSession,
       uint executionContext,
       bool enable,
       string path,
       int result)
   {
       // do some work when the notification about disabling condition arrives
   }

   ...
   // gets the application instance
   Application application = Application.Instance;

   // initializes application
   application.Initialize();

   // creates a new AeSession object and adds it to the applicatiom
   AeSession session = new AeSession("opcae:///Softing.OPCToolboxDemo_ServerAE.1/{2E565243-B238-11D3-842D-0008C779D775}");

   ExecutionOptions executionOptions = new ExecutionOptions();
   executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS;
   executionOptions.ExecutionContext = 1;

   session.EnableAeConditionsBySourceCompleted += new EnableAeConditionsBySourceEventHandler(HandleEnableAeConditionsBySourceCompleted);

   // connects AeSession object
   session.Connect(true, true, executionOptions);                    

   // switch off monitoring condition - related events
   session.EnableAeConditionsBySource(new string[] {"computer.clock.time slot 1"},
                               false,
                               executionOptions);
   ...

   // disconnects session
   session.Disconnect(executionOptions);

   // removes the added session
   application.RemoveAeSession(session);

   // terminates the application
   application.Terminate();
   ...

Vb .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...

   Private Sub HandleEnableAeConditionsBySourceCompleted(
       ByVal anAeSession As AeSession, _
       ByVal executionContext As System.UInt32, _
       ByVal enable As Boolean, _
       ByVal path As String, _
       ByVal result As Int32)

       ' do some work when the notification about disabling condition arrives
   End Sub

   ...
   'gets the application instance
   Dim application As Application = Application.Instance
   'initializes application
   application.Initialize()

   'creates a new AeSession object and adds it to the applicatiom
   Dim session As AeSession = new AeSession("opcae:///Softing.OPCToolboxDemo_ServerAE.1/{2E565243-B238-11D3-842D-0008C779D775}")

   Dim executionOptions As New ExecutionOptions
   executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS
   executionOptions.ExecutionContext = Convert.ToUInt32(1)

   AddHandler session.EnableAeConditionsBySourceCompleted, AddressOf HandleEnableAeConditionsBySourceCompleted

   'connects AeSession object
   session.Connect(True, True, executionOptions)                    

   'switch off monitoring condition - related events
   session.EnableAeConditionsBySource(New String() {"computer.clock.time slot 1"}, _
                               False, _
                               executionOptions)
   ...

   'disconnects session
   session.Disconnect(executionOptions)

   'removes the added session
   application.RemoveAeSession(session)

   'terminates the application
   application.Terminate()
   ...

.. _c-2:

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...
   class MyAeSession : public AeSession{

       MyAeSession (const tstring& url): AeSession(url) {}

       void handleEnableAeConditionsBySourceCompleted(
           unsigned long executionContext,
           bool enable,
           tstring& source,
           long result){

           // do some work when the notification about disabling condition arrives
       }
   };
   ...
   int _tmain(int argc, _TCHAR* argv[])
   {
       // gets the application instance
       Application* application = getApplication();

       // initializes application
       application->initialize();

       // creates a new AeSession object
       MyAeSession* session = new MyAeSession(_T("opcae:///Softing.OPCToolboxDemo_ServerAE.1/{2E565243-B238-11D3-842D-0008C779D775}"));    

       ExecutionOptions executionOptions;

       // connects AeSession object
       session->connect(TRUE, TRUE, &executionOptions);    

       std::vector<tstring>> sources;
       sources.push_back(_T("computer.clock.time slot 1"));

       executionOptions.setExecutionType(ASYNCHRONOUS);
       executionOptions.setExecutionContext(1);

       // switch off monitoring condition - related events
       session->enableAeConditionsBySource(
               sources,
               false,
               &executionOptions);
       ...

       // disconnects session
       session->disconnect(&executionOptions);

       // removes the added session
       application->removeAeSession(session);

       // terminates the application
       application->terminate();
       // releases the resources used by application
       releaseApplication();

       delete session;
       ...
   }

The methods **AcknowledgeAeConditions**\ (.NET) and
**acknowledgeAeConditions**\ (C++) of an AeSession object are used by
the Alarms and Events Client to acknowledge condition-related events
that have occurred, if this is required in the corresponding attribute
of the event notification. (see **AckRequired** property of an
**AeCondition** object)

Acknowledging condition-related events can be done both synchronously
and asynchronously. The *ExecutionOptions* parameter of the method
mentioned above permits specifying the way the operation is performed.

When the acknowledgement arrives in the server a new event occurs. This
makes it possible to keep an alarm history on the client’s side. There
the following can be recorded:

-  when the alarm occurred(value of the OccurenceTime property (see
   **AeEvent**) of the first notification or value of the property
   ActiveTime(see **AeCondition**) of the second notification)

-  when the acknowledgement was made(value of the property OccurenceTime
   of the second notification)

-  a hint to the person who acknowledged the alarm (a value of the
   property ActorId (see **AeCondition**) of the second notification)
   ### Note

::

   An acknowledgement affects the condition state only if it (the condition) is currently active or it is currently 
   inactive and the most recent active condition was unacknowledged. If an inactive, unacknowledged condition again 
   becomes active, all subsequent acknowledgements will be validated against the newly active condition state 
   attributes.

The methods **GetAeConditionState**\ (.NET) and **getAeConditionState**
(C++) of an AeSession object can be used by the client to request the
current status information of a condition available in a source of the
eventarea. Basing on the condition’s source path and name, the server
returns to the client the condition state ( see the **AeConditionState**
class ).

This method could be invoked by a client when starting a server in order
to get information on the state of various conditions.

Getting a condition state can be done both synchronously and
asynchronously. The *ExecutionOptions* parameter of this method permits
specifying the way the operation is performed.

For an example on this topic check the **AeCondition** example.
