**Browsing the AE address space**
---------------------------------

An Alarms and Events server can record and evaluate values from
different data sources and decide whether an event has occurred. The
data sources can be located directly on I/O cards plugged in into the
PC. However, they can also reside on any devices, such as regulators and
input/output modules, which are connected via serial links or via field
buses.

An event is defined as a detectable occurrence (e.g failure of a device,
excess of a limit value, operator intervention). Several events can be
allocated to specific variables. The event has several conditions and
subconditions allocated to it. When a subcondition becomes active the
event occurs. Thus the event signals an alarm, which occurs as long as
the subcondition is active.

There are three event types and they are defined in the
**EnumEventType.**

-  Condition related events: CONDITION

-  Tracking related events: TRACKING

-  Simple events: SIMPLE

There are two ways of structuring events:

-  the **event area** is used for topographic organization of events and
   can be compared with the address space of an Data Access Server. It
   is always hierarchical and it is structured into areas and sources.
   The areas represent the places in which the events may occur and the
   sources represent the sources of the events.

-  the **filter space** is used for logical structuring of the events.
   There are three event types (the ones enumerated above), and there
   are event categories for all of them.

If areas are available, the client can use the **Browse** method of the
AeSession object to browse the eventarea organization. The first
parameter of the Browse method permits specifying for what address space
element the fetching of its children is made. The result of the browsing
is influenced by the value of the **AddressSpaceElementBrowseOptions**
parameter.

Using these options the client can specify what he wants to get when
browsing:

-  only nodes below the current node

-  only leaves below the current node

-  everything below the current node (all the nodes and leaves below the
   current node)

As result of browsing, an array of **AddressSpaceElement** objects is
returned.

Example 1
~~~~~~~~~

The following example shows how to asynchronously browse all the areas
and sources of the virtual root of the *Softing OPC Toolkit OPC AE Demo
Server*.

For a more detailed example on how to synchronously browse the Softing
OPC Toolkit OPC AE Demo Server check the AEBrowse example.

C
~

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...
   private void HandleBrowseCompleted (
       AeSession anAeSession,
       uint executionContext,
       uint addressSpaceElementHandle,        
       AddressSpaceElement[] addressElements,
       int result)
   {

       if(ResultCode.SUCCEEDED(result)){

           // do some work with the received array of address space elements
       }
       else{
           System.Diagnostics.Debug.WriteLine("Asynchronous browse failed");
       }            
   }
   ...

   Application application = Application.Instance;

   // initializes the application
   application.Initialize();

   // creates anew AeSession object and adds it to the application
   AeSession session = new AeSession("opcae:///Softing.OPCToolboxDemo_ServerAE.1/{2E565243-B238-11D3-842D-0008C779D775}");                

   session.BrowseCompleted += new BrowseAeServerEventHandler(HandleBrowseCompleted);

   session.Connect(true, false, new ExecutionOptions());    

   AddressSpaceElementBrowseOptions browseOptions = new AddressSpaceElementBrowseOptions();

   browseOptions.ElementTypeFilter = EnumAddressSpaceElementType.TYPES_ALL;
   AddressSpaceElement[] addressSpaceElements = null;

   ExecutionOptions executionOptions = new ExecutionOptions();    
   executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS;
   executionOptions.ExecutionContext = 1;

   AddressSpaceElement addressSpaceElement = new AddressSpaceElement();
   addressSpaceElement.Name = session.Url;    

   session.Browse(
       addressSpaceElement.Name,
       browseOptions,
       out addressSpaceElements,
       executionOptions)    

   ...

   // disconnect session
   session.Disconnect(new ExecutionOptions()));

   // remove session from application
   application.RemoveAeSession(session);

   application.Terminate();    
   ...

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...
   Private Sub HandleBrowseCompleted (
       ByVal anAeSession as AeSession, _
       ByVal executionContext As System.UInt32, _
       ByVal addressSpaceElementHandle as UInteger, _        
       ByVal addressElements As AddressSpaceElement(), _
       ByVal result As Int32)

       If ResultCode.SUCCEEDED(result) Then
           'do some work with the received array of address space elements
       Else
           System.Diagnostics.Debug.WriteLine("Asynchronous browse failed")
       End If        
    End Sub
   ...

   Dim application As Application = Application.Instance

   'initializes the application
   application.Initialize()

   'creates a new AeSession object and adds it to the application
   Dim session As AeSession  = new AeSession("opcae:///Softing.OPCToolboxDemo_ServerAE.1/{2E565243-B238-11D3-842D-0008C779D775}")        

   AddHandler session.BrowseCompleted, AddressOf HandleBrowseCompleted

   session.Connect(True, False, new ExecutionOptions());    

   Dim browseOptions As AddressSpaceElementBrowseOptions = new AddressSpaceElementBrowseOptions()

   browseOptions.ElementTypeFilter = EnumAddressSpaceElementType.TYPES_ALL
   Dim addressSpaceElements As AddressSpaceElement() = Nothing

   Dim executionOptions As ExecutionOptions executionOptions = new ExecutionOptions()
   executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS
   executionOptions.ExecutionContext = Convert.ToUInt32(1)

   Dim addressSpaceElement As AddressSpaceElement  = new AddressSpaceElement()
   addressSpaceElement.Name = session.Url

   session.Browse(
       addressSpaceElement.Name, _
       browseOptions, _
       out addressSpaceElements, _
       executionOptions)    

   ...

   'disconnect session
   session.Disconnect(new ExecutionOptions()))

   'remove session from application
   application.RemoveAeSession(session)

   application.Terminate()    
   ...

.. _c-1:

C++
~~~

::

   class MyAeSession : public AeSession{

       public:

       MyAeSession (const tstring& url): AeSession(url) {}
       void handleBrowseCompleted(
           unsigned long executionContext,
           unsigned long addressSpaceElementHandle,        
           std::vector<DaAddressSpaceElement*>& addressSpaceElements,
           long result)
       {
           if (SUCCEEDED(result)){
               // do some work with the received array of address space elements
           }
           else {
               _tprintf(_T("\n Browse failed [0x%8.8X]\n"), result);
           } // end else ... if        
       } // end handleBrowseCompleted
   };
   ...

   int _tmain(int argc, _TCHAR* argv[]) {

       Application* application = getApplication();
       application->initialize();

       ExecutionOptions executionOptions;

       // creates a new MyAeSession object and adds it to the application
       MyAeSession* session = new MyAeSession(_T("opcae:///Softing.OPCToolboxDemo_ServerAE.1/{2E565243-B238-11D3-842D-0008C779D775}"));

       session->connect(TRUE, FALSE, &executionOptions);

       AddressSpaceElement* root = new AddressSpaceElement();
       root->setName(session->getUrl());

       AddressSpaceElementBrowseOptions* someBrowseOptions = new AddressSpaceElementBrowseOptions();        
       std::vector<AddressSpaceElement*>addressSpaceElements;

       // browse all the branches and leaves of the current node
       someBrowseOptions->setElementTypeFilter(TYPES_ALL);

       executionOptions.setExecutionType(ASYNCHRONOUS);    
       executionOptions.setExecutionContext(1);

       session->browse(
           addressSpaceElement->getItemId(),
           someBrowseOptions,
           addressSpaceElements,
           &executionOptions);
       ...

       // disconnect session
       session->disconnect(&executionOptions);

       // remove session from application
       application->removeAeSession(session);

       application->terminate();    
       releaseApplication();

       delete session;
       ...
   } // end main

Each condition is associated with a source. A source may be a process
tag or possibly a device or subsystem. The **QueryAeSourceConditions**
method of an AeSession object gives clients a mean of finding out the
specific condition names associated with the specified source in the
eventarea.

The events can also be structured based on the category they belong to.
Different event categories are available for the three event types. The
**QueryAeCategories** method of an AeSession object is used to query the
categories to which an event can belong.

In the event notification, a whole series of mandatory attributes is
passed to the client. These attributes are sometimes not sufficient to
transfer all the important information to the client. When adapting the
server to a concrete application, additional attributes can be
configured for the different event categories. The client is able to
query for the additional attributes for an event category using the
**QueryAeAttributes** method of an AeCategory object.

With condition â€“ related events, different conditions are defined for
the various event categories. The **QueryAeConditionNames** method of an
AeCategory object is used to give the specific condition names which the
event server supports for the current event category. Some conditions
can have subconditions. The **QueryAeSubConditionNames** method of an
AeCategory object gives the sub-condition names which are associated
with a specified condition name.

For a detailed example on how to synchronously use the above enumerated
methods check the **AEEventTypes** example.
