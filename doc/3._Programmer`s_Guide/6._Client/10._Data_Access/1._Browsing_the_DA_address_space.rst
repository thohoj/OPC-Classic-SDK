**Browsing the DA address space**
---------------------------------

A Data Access server’s address space contains all data sources and data
sinks made available by that server.

The address space can be a tree structure of any depth (hierarchical
address space) or it can be flat (flat address space).

In a flat address space, all the leaves are on a single level. There are
no nodes.

In a hierarchical address space nodes and leaves exist. The nodes can be
used as structuring means; they can for example represent devices in an
installation. Leaves are available at nodes, representing data sinks and
data sources. These can be measured variables of a device.

After starting a Data Access server, a Data Access client has to be able
to move through the server’s address space in order to get further
information relating to a node.

The method **Browse** of a DaSession object is available to support this
navigation. Browsing the server’s address space allows client to know
its structure.

The first parameter of the Browse method permits specifying for what
address space element the fetching of its children is made. The address
space element is uniquely identified in the server’s address space by
its **ItemId**. “increment.I1” would be an example of such an
identifier. The delimiters that appear in the identifier are always
server – specific.

At browsing, an array of **DaAddressSpaceElement** objects is returned.
Each returned DaAddressSpaceElement object is uniquely identified in the
server’s address space by its ItemId.

The result of browsing is hierarchical. Starting from the address space
element specified by its identifier, the client will get information on
the nodes and leaves below. With **DaAddressSpaceElementBrowseOptions**
parameter of the Browse method, the client can specify what he wants to
get:

-  only nodes below the current node

-  only leaves below the current node

-  everything below the current node (all the nodes and leaves below the
   current node)

Example
~~~~~~~

The following example shows how to **asynchronously** browse all the
nodes and leaves of the virtual root of the *Softing OPC Toolkit OPC DA
Demo Server*.

For a more detailed example on how to **synchronously** browse the
Softing OPC Toolkit OPC DA Demo Server’s address space check the
**DABrowse** example.

C
~

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...
   private void handleBrowseCompleted (
           DaSession aDaSession,        
           uint executionContext,
           uint addressSpaceElementHandle,
           String addressSpaceElementID,
           String addressSpaceElementPath,
           DaAddressSpaceElement[] addressSpaceElements,
           int result)
   {
       if(ResultCode.SUCCEEDED(result)){

           // do some work with the received array of address space elements
       }
       else{
           System.Diagnostics.Debug.WriteLine("Asynchronous browse failed");
       }            
   }
   ...

   Application application = Application.Instance;

   // initializes the application
   application.Initialize();

   // creates a new DaSession object and adds it to the application
   DaSession session = new DaSession("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}");

   session.BrowseCompleted += new BrowseDaServerEventHandler(handleBrowseCompleted);

   session.Connect(true, false, new ExecutionOptions());    

   DaAddressSpaceElementBrowseOptions browseOptions = new DaAddressSpaceElementBrowseOptions();

   browseOptions.ElementTypeFilter = EnumAddressSpaceElementType.TYPES_ALL;
   DaAddressSpaceElement[] addressSpaceElements = null;

   ExecutionOptions executionOptions = new ExecutionOptions();    
   executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS;
   executionOptions.ExecutionContext = 0;

   session.Browse(
           session.Url,
           browseOptions,
           out addressSpaceElements,
           executionOptions)

   executionOptions.ExecutionContext++;

   ...

   // disconnect session
   session.Disconnect(new ExecutionOptions());    

   // remove session from application
   application.RemoveDaSession(session);

   application.Terminate();    
   ...

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...
   Private Sub handleBrowseCompleted (
       ByVal anDaSession as DaSession, _
       ByVal executionContext As System.UInt32, _
       ByVal addressSpaceElementHandle as UInteger, _        
       ByVal addressSpaceElementID as String, _
       ByVal addressSpaceElementPath as String, _
       ByVal addressElements As AddressSpaceElement(), _
       ByVal result As Int32)

       If ResultCode.SUCCEEDED(result) Then

           'do some work with the received array of address space elements
       Else
           System.Diagnostics.Debug.WriteLine("Asynchronous browse failed")
       End If        
    End Sub
   ...

   Dim application As Application = Application.Instance

   'initializes the application
   application.Initialize()

   'creates a new DaSession object and adds it to the application
   Dim session As DaSession = new DaSession("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}")

   AddHandler session.BrowseCompleted, AddressOf HandleBrowseCompleted    

   session.Connect(True, False, new ExecutionOptions());    

   Dim browseOptions As DaAddressSpaceElementBrowseOptions = new DaAddressSpaceElementBrowseOptions()

   browseOptions.ElementTypeFilter = EnumAddressSpaceElementType.TYPES_ALL
   Dim addressSpaceElements As DaAddressSpaceElement() = Nothing

   Dim executionOptions As ExecutionOptions = new ExecutionOptions()
   executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS
   executionOptions.ExecutionContext = Convert.ToUInt32(1)

   session.Browse(
           session.Url, _
           browseOptions, _
           out addressSpaceElements, _
           executionOptions)    

   ...

   'disconnect session
   session.Disconnect(new ExecutionOptions());    

   'remove session from application
   application.RemoveDaSession(session);

   application.Terminate();    
   ...

.. _c-1:

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...
   class MyDaSession : public DaSession{

       public:

           MyDaSession (const tstring& url): DaSession(url) {}

           void handleBrowseCompleted(
               unsigned long executionContext,
               unsigned long addressSpaceElementHandle,
               tstring& addressSpaceElementId,
               tstring& addressSpaceElementPath,
               std::vector<DaAddressSpaceElement*>& addressSpaceElements,
               long result){

               if (SUCCEEDED(result)){
                   // do some work with the received array of address space elements
               }
               else {
                   _tprintf(_T("\n Browse failed [0x%8.8X]\n"), result);
               } // end else ... if        
           } // end handleBrowseCompleted
   };
   ...
   int _tmain(int argc, _TCHAR* argv[]) {

       Application* application = getApplication();
       application->initialize();

       ExecutionOptions executionOptions;        

       // creates a new MyDaSession object and adds it to the application
       MyDaSession* session = new MyDaSession(_T("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}"));

       session->connect(TRUE, FALSE, &executionOptions);

       DaAddressSpaceElement* root = new DaAddressSpaceElement();
       root->setName(session->getUrl());

       DaAddressSpaceElementBrowseOptions* someBrowseOptions = new DaAddressSpaceElementBrowseOptions();        
       std::vector<DaAddressSpaceElement*> addressSpaceElements;

       // browse all the branches of the current node
       someBrowseOptions->setElementTypeFilter(BRANCH);

       executionOptions.setExecutionType(ASYNCHRONOUS);    
       executionOptions.setExecutionContext(0);

       session->browse(
               addressSpaceElement->getItemId(),
               someBrowseOptions,
               addressSpaceElements,
               &executionOptions);

       // do something with the received branches

       // browse all the leaves of the current node
       someBrowseOptions->setElementTypeFilter(LEAF);
       session->browse(
               addressSpaceElement->getItemId(),
               someBrowseOptions,
               addressSpaceElements,
               &executionOptions);

       // do something with the received leaves

       ...
       // disconnect session
       session->disconnect(&executionOptions);

       // remove session
       application->removeAeSession(session);

       application->terminate();    
       releaseApplication();

       delete session;
       ...
   }

ß

In an application, not only data sources and data sinks are of interest,
but also information on these variables and devices. Copying this
information on items unnecessarily expands the address space. Therefore
properties (represented by **DaProperty** objects) are allocated to
nodes and leaves. The name of a manufacturer of a device, for example,
can be mapped to a property.
