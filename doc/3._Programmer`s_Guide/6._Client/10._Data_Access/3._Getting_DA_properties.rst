**Getting DA properties**
-------------------------

Properties represented by **DaProperty** objects are allocated to nodes
and leaves. The name of a manufacturer of a device or a syntax address
of a specified, item, for example, can be mapped to a property. In an
application, not only data sources and data sinks are of interest, but
also information regarding variables, devices and others.

.. _getting-da-properties-1:

Getting DA Properties
~~~~~~~~~~~~~~~~~~~~~

The client is able to gain information linked to properties very easily
using the **GetDaProperties** method of a DaSession object. First of
all, it queries for information to the properties available at one point
(node or leaf) in the address space. For every property, the following
information is available:

-  the property identifier.

   **1 - 99** OPC–specific Properties. These properties have to be
   available at all items in the address space. Six properties have been
   defined up to now. Examples are data type and access rights.

   **100 - 4099** Recommended properties. Definitions of properties
   within this sub range are provided in OPC Specifications.

   **5000 – 65535** Vendor-specific Properties. Here, it is possible to
   add properties for the manufacturers of the server, users or others.

-  the property name.

-  the identifier of the item to which the property belongs.

-  the access path of the item to which the property belongs

-  the textual description of the property.

-  the value hold by the property.

-  the type of the value kept in the property.

Properties offer descriptive information for Address Space Elements.
Since the elements of the address space tree are created by the server
application, they can be derived from the base clases
DaAddresssSpaceElement and DaProperty.

The getting properties operation can be done in either synchronous or
asynchronous manner, based on how is most convenient.

With a synchronous interogation, the client calls the
**GetDaProperties** method and waits for the return value. Synchronous
call should only be used if data access takes place quickly (e.g. values
are available in the PC) as otherwise the client can be blocked for too
long. ### Example 1

The following example shows how to **synchronously** get all properties
of an item using DaSession object. For more detailed example on this
topic have a look on the **DAGetProperties** sample.

C
~

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...

   string addressSpaceElementId;
   string addressSpaceElementPath;

   addressSpaceElementId = "increment.I1";
   addressSpaceElementPath = string.Empty;

   // gets the application instance
   Application application = Application.Instance;

   // initializes the application
   application.Initialize();

   // creates a new DaSession object and adds it to the application
   // set the COM-DA url here
   DaSession session = new DaSession("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}");

   // set the XML-DA url here
   //DaSession session = new DaSession("http://localhost:8079/OPC/DA");

   // sets the execution options
   ExecutionOptions executionOptions = new ExecutionOptions();
   executionOptions.ExecutionType = EnumExecutionType.SYNCHRONOUS;
   executionOptions.ExecutionContext = 0;

   // connects object to the server
   session.Connect(true, false, executionOptions);

   DaProperty[] properties = null;

   DaGetPropertiesOptions getAllPropertiesOptions = new DaGetPropertiesOptions();
   getAllPropertiesOptions.WhatPropertyData = EnumPropertyData.ALL;

   // Getting all properties of address space element
   session.GetDaProperties(
       addressSpaceElementId,
       addressSpaceElementPath,
       getAllPropertiesOptions,
       out properties,
       executionOptions);

   // do something with the all properties
   ...

   DaProperty[] someProperties = null;
   DaGetPropertiesOptions getPropertiesOptions = new DaGetPropertiesOptions();                    
   getPropertiesOptions.PropertyIds = new int[]{1,5};
   getPropertiesOptions.WhatPropertyData = EnumPropertyData.ALL;

   // Getting specific properties 1 and 5 of address space element
   session.GetDaProperties(
       addressSpaceElementId,
       addressSpaceElementPath,
       getPropertiesOptions,
       out someProperties,
       executionOptions);    

   // do something with the some specific properties
   ...

   // terminates the application
   application.Terminate();

   session = null;

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...

   Dim addressSpaceElementId As String = Nothing
   addressSpaceElementId = "increment.I1"
   Dim addressSpaceElementPath As String = Nothing
   addressSpaceElementPath = ""

   ' gets the application instance
   Dim application As Application = application.Instance

   ' initializes the application
   application.Initialize()

   ' creates a new DaSession object and adds it to the application
   ' set the COM-DA url here
   Dim session As New DaSession("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}")
   ' set the XML-DA url here
   ' Dim session As New DaSession("http://localhost:8079/OPC/DA")


   ' sets the execution options
   Dim executionOptions As ExecutionOptions = New ExecutionOptions()
   executionOptions.ExecutionType = EnumExecutionType.SYNCHRONOUS
   executionOptions.ExecutionContext = Convert.ToUInt32(0)

   ' connects object to the server
   session.Connect(True, False, executionOptions)

   Dim properties As DaProperty() = Nothing
   Dim getAllPropertiesOptions As New DaGetPropertiesOptions()
   getAllPropertiesOptions.WhatPropertyData = EnumPropertyData.ALL

   ' Getting all properties of address space element
   session.GetDaProperties(
       addressSpaceElementId,
       addressSpaceElementPath,
       getAllPropertiesOptions,
       properties,
       executionOptions)

   ' do something with the all properties
   ...

   Dim someProperties As DaProperty() = Nothing
   Dim getPropertiesOptions As New DaGetPropertiesOptions()
   getPropertiesOptions.PropertyIds = New Integer() {1, 5}
   getPropertiesOptions.WhatPropertyData = EnumPropertyData.ALL

   ' Getting specific properties 1 and 5 of address space element
   session.GetDaProperties(
       addressSpaceElementId,
       addressSpaceElementPath,
       getPropertiesOptions,
       someProperties,
       executionOptions)

   ' do something with the some specific properties
   ...

   // terminates the application
   application.Terminate()

   session = Nothing

.. _c-1:

C++
~~~

::

     using namespace SoftingOPCToolboxClient;
     ...

     int _tmain(int argc, _TCHAR* argv[]) {

       tstring addressSpaceElementId;
       tstring addressSpaceElementPath;

       addressSpaceElementId = _T("increment.I1");
       addressSpaceElementPath = _T("");

       // gets the application instance
       Application* application = getApplication();

       // initializes the application
       application->initialize();

       // creates a new DaSession object and adds it to the application
       // set the COM-DA url here
       DaSession* session = new DaSession(_T("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}"));
       // set the XML-DA url here
       //DaSession* session = new DaSession(_T("http://localhost:8079/OPC/DA"));

       // sets the execution options
       ExecutionOptions executionOptions;
       executionOptions.setExecutionType(EnumExecutionType_SYNCHRONOUS);
       executionOptions.setExecutionContext(0);               

       // connects object to the server
       session->connect(TRUE, FALSE, &executionOptions);

       std::vector<DaProperty*> allProperties;
       std::vector<DaProperty*> someProperties;
       std::vector<unsigned long> propertyIds;
       std::vector<tstring> propertyNames;
       std::vector<DaProperty*>::iterator propertiesIterator;

       DaGetPropertiesOptions propertiesOptions;
       propertiesOptions.setWhatPropertyData(EnumPropertyData_ALL);

       // Getting all properties of address space element
       session->getDaProperties(
            addressSpaceElementId,
            addressSpaceElementPath,
            &propertiesOptions,
            allProperties,
            &executionOptions);

       // do something with the all properties
       ...

       // deallocates memmory allocated for allProperties array
       for (propertiesIterator = allProperties.begin(); propertiesIterator != allProperties.end(); propertiesIterator++)
       {
           if (*propertiesIterator != NULL)
               delete *propertiesIterator;
       }

       propertyIds.push_back(1);
       propertyIds.push_back(5);
       // set the property names (it's a must for XML-DA)
       //propertyNames.push_back(_T("dataType"));
       //propertyNames.push_back(_T("accessRights"));

       propertiesOptions.setPropertyIds(propertyIds);
       propertiesOptions.setPropertyNames(propertyNames);

       // Getting specific properties 1 and 5 of address space element
       session->getDaProperties(
           addressSpaceElementId,
           addressSpaceElementPath,
           &propertiesOptions,
           someProperties,
           &executionOptions);

       // do something with the some specific properties
       ...

       // deallocates memmory allocated for someProperties array
       for (propertiesIterator = someProperties.begin(); propertiesIterator != someProperties.end(); propertiesIterator++)
       {
           if (*propertiesIterator != NULL)
               delete *propertiesIterator;
       }

       // terminates the application
       application->terminate();    

       // releases the resources used by application
       releaseApplication();

       delete session;
   }

With an asynchronous interogation, the client calls the
**getDaProperties** method and then immediately gets feedback. After a
certain interval of time, which depends on the kind of data access, the
client gets the desired value via a callback. Asynchronous getting DA
properties is to be used if data recording through the servers takes
longer (values have to be requested). The answer to the reading request
comes from the server via callback. When the read is complete in .NET
the **GetDaPropertiesCompleted** event is raised and in C++ the
**HandleGetDaPropertiesCompleted** method is called.

Example 2
~~~~~~~~~

The following example shows how to **asynchronously** get DA properties
of a DaItem using DaSession object. For a more detailed example on this
topic check the **DAGetProperties** sample. ### C#

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...

   public class MyDaSession : DaSession
   {
       public MyDaSession (string url) : base (url) 
       {
           GetDaPropertiesCompleted += new GetDaPropertiesEventHandler(HandleGetDaPropertiesCompleted);    
       }

       public static void HandleGetDaPropertiesCompleted(
           DaSession aDaSession,
           uint executionContext,
           uint addressSpaceElementHandle,
           string addressSpaceElementId, 
           string addressSpaceElementPath,
           DaProperty[] properties,
           int result)
       {

           if(ResultCode.SUCCEEDED(result))
           {
               // do something if get DA Properties succeeded
           }
           else
           {
               System.Console.WriteLine("Failed to asynchronously get properties of address space element: " + addressSpaceElementId);
           }
       }
   }

   ...

   static void Main(string[] args) 
   {
       string addressSpaceElementId;
       string addressSpaceElementPath;

       addressSpaceElementId = "increment.I1";
       addressSpaceElementPath = string.Empty;

       // gets the application instance
       Application application = Application.Instance;

       // initializes the application
       application.Initialize();

       // creates a new DaSession object and adds it to the application
       // set the COM-DA url here
       DaSession session = new DaSession("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}");

       // set the XML-DA url here
       //DaSession session = new DaSession("http://localhost:8079/OPC/DA");

       // sets the execution options
       ExecutionOptions executionOptions = new ExecutionOptions();
       executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS;
       executionOptions.ExecutionContext = 0;

       // connects object to the server
       session.Connect(true, false, null);

       DaProperty[] properties = null;

       DaGetPropertiesOptions getAllPropertiesOptions = new DaGetPropertiesOptions();
       getAllPropertiesOptions.WhatPropertyData = EnumPropertyData.ALL;

       // Getting all properties of address space element
       session.GetDaProperties(
           addressSpaceElementId,
           addressSpaceElementPath,
           getAllPropertiesOptions,
           out properties,
           executionOptions);

       executionOptions.ExecutionContext++;

       DaProperty[] someProperties = null;
       DaGetPropertiesOptions getPropertiesOptions = new DaGetPropertiesOptions();                    
       getPropertiesOptions.PropertyIds = new int[]{1,5};
       getPropertiesOptions.WhatPropertyData = EnumPropertyData.ALL;

       // Getting specific properties 1 and 5 of address space element
       session.GetDaProperties(
           addressSpaceElementId,
           addressSpaceElementPath,
           getPropertiesOptions,
           out someProperties,
           executionOptions);    

       executionOptions.ExecutionContext++;

       // terminates the application
       application.Terminate();

       session = null;
   }

.. _vb-.net-1:

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...

   Public Class MyDaSession  Inherits DaSession

       Public Sub New(ByVal url As String)
             MyBase.New(url)
             AddHandler GetDaPropertiesCompleted, AddressOf HandleGetDaPropertiesCompleted
       End Sub

       Public Shared Sub HandleGetDaPropertiesCompleted( _ 
           ByVal aDaSession As DaSession, _
           ByVal executionContext As UInt32, _
           ByVal addressSpaceElementHandle As UInteger, _
           ByVal addressSpaceElementId As String, _
           ByVal addressSpaceElementPath As String, _
           ByVal properties As DaProperty(), _
             ByVal result As Integer)

           If ResultCode.SUCCEEDED(result) Then
               ' do something if get DA Properties succeeded
           Else
               System.Console.WriteLine("Failed to asynchronously get properties of address space element: " + addressSpaceElementId)
           End If

       End Sub
     End Class

     ...

     Shared Sub Main(ByVal args As String())

       Dim addressSpaceElementId As String = Nothing
       addressSpaceElementId = "increment.I1"
       Dim addressSpaceElementPath As String = Nothing
       addressSpaceElementPath = ""

       ' gets the application instance
       Dim application As Application = application.Instance

       ' initializes the application
       application.Initialize()

       ' creates a new DaSession object and adds it to the application
       ' set the COM-DA url here
       Dim session As New DaSession("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}")
       ' set the XML-DA url here
       ' Dim session As New DaSession("http://localhost:8079/OPC/DA")


       ' sets the execution options
       Dim executionOptions As ExecutionOptions = New ExecutionOptions()
       executionOptions.ExecutionType = EnumExecutionType.SYNCHRONOUS
       executionOptions.ExecutionContext = Convert.ToUInt32(0)

       ' connects object to the server
       session.Connect(True, False, Nothing)

       Dim properties As DaProperty() = Nothing
       Dim getAllPropertiesOptions As New DaGetPropertiesOptions()
       getAllPropertiesOptions.WhatPropertyData = EnumPropertyData.ALL

       ' Getting all properties of address space element
       session.GetDaProperties(
           addressSpaceElementId,
           addressSpaceElementPath,
           getAllPropertiesOptions,
           properties,
           executionOptions)

       executionOptions.ExecutionContext = Convert.ToUInt32(Convert.ToInt32(m_executionOptions.ExecutionContext) + 1)    

       Dim someProperties As DaProperty() = Nothing
       Dim getPropertiesOptions As New DaGetPropertiesOptions()
       getPropertiesOptions.PropertyIds = New Integer() {1, 5}
       getPropertiesOptions.WhatPropertyData = EnumPropertyData.ALL

       ' Getting specific properties 1 and 5 of address space element
       session.GetDaProperties(
           addressSpaceElementId,
           addressSpaceElementPath,
           getPropertiesOptions,
               someProperties,
           executionOptions)

       m_executionOptions.ExecutionContext = Convert.ToUInt32(Convert.ToInt32(m_executionOptions.ExecutionContext) + 1)    

       // terminates the application
       application.Terminate()

       session = Nothing

     End Sub

.. _c-2:

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...

   class MyDaSession : public DaSession
   {
       public:

       MyDaSession(const tstring& url) : DaSession(url) {}

       void handleGetDaPropertiesCompleted(
           unsigned long executionContext,
           unsigned long addressSpaceElementHandle,
           tstring& addressSpaceElementId,
           tstring& addressSpaceElementPath,
           std::vector<DaProperty*>& someDaProperties,
           long result)
       {                        
           if (SUCCEEDED(result))
           {
               // do something if get DA Properties succeeded
           }
           else
           {
               _tprintf(_T(" Failed to asynchronously get properties of address space element: %s"), addressSpaceElementId.c_str());
           }
       } 

       virtual ~MyDaSession(){}
   };

   ...

   int _tmain(int argc, _TCHAR* argv[])
   {
       tstring addressSpaceElementId;
       tstring addressSpaceElementPath;

       addressSpaceElementId = _T("increment.I1");
       addressSpaceElementPath = _T("");

       // gets the application instance
       Application* application = getApplication();

       // initializes the application
       application->initialize();

       // creates a new DaSession object and adds it to the application
       // set the COM-DA url here
       DaSession* session = new MyDaSession(_T("opcda:///Softing.OPCToolboxDemo_ServerDA.1/{2E565242-B238-11D3-842D-0008C779D775}"));
       // set the XML-DA url here
       //DaSession* session = new MyDaSession(_T("http://localhost:8079/OPC/DA"));

       // sets the execution options
       ExecutionOptions executionOptions;
       unsigned long executionContext;
       executionOptions.setExecutionType(EnumExecutionType_ASYNCHRONOUS);
       executionContext = executionOptions.getExecutionContext();
       executionOptions.setExecutionContext(0);               

       // connects object to the server
       session->connect(TRUE, FALSE, 0);

       std::vector<DaProperty*> allProperties;
       std::vector<DaProperty*> someProperties;
       std::vector<unsigned long> propertyIds;
       std::vector<tstring> propertyNames;

       DaGetPropertiesOptions propertiesOptions;
       propertiesOptions.setWhatPropertyData(EnumPropertyData_ALL);

       // Getting all properties of address space element
       session->getDaProperties(
            addressSpaceElementId,
            addressSpaceElementPath,
            &propertiesOptions,
            allProperties,
            &executionOptions);

       executionOptions.setExecutionContext(++executionContext);

       propertyIds.push_back(1);
       propertyIds.push_back(5);
       // set the property names (it's a must for XML-DA)
       //propertyNames.push_back(_T("dataType"));
       //propertyNames.push_back(_T("accessRights"));

       propertiesOptions.setPropertyIds(propertyIds);
       propertiesOptions.setPropertyNames(propertyNames);

       // Getting specific properties 1 and 5 of address space element
       session->getDaProperties(
           addressSpaceElementId,
           addressSpaceElementPath,
           &propertiesOptions,
           someProperties,
           &executionOptions);

       executionOptions.setExecutionContext(++executionContext);  

       ...

       // terminates the application
       application->terminate();    

       // releases the resources used by application
       releaseApplication();

       delete session;
   }
