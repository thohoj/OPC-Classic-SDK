**Enumerate servers**
---------------------

The clients have the possibility to inform themselves of OPC servers
that support Data Access or Alarms and Events Specifications and are
located on the local computer or on other remote computers.

With this end in view, the clients will use the functionality of the
**ServerBrowser** class. Creating a new ServerBrowser object permits
browsing all the OPC servers installed on a computer. The computer on
which the browsing is made must be specified when creating a new
ServerBrowser object. The constructor has one parameter which represents
the computer’s IP address.

A ServerBrowser object makes available the **Browse** method which
allows the client to find the necessary information about all the
servers that support a specified interface specification.

The interface specification the servers support is given by the method’s
first parameter. The value of this parameter is one of the
**EnumOPCSpecification** values.

The client may specify what kind of information he is interested in.
Therefore the second parameter comes to specify this. The value of this
parameter is one of the **EnumServerBrowserData** values.

After browsing, based on the values of the first two parameters, the
third parameter will contain all the requested information about the
servers. It is an array of **ServerBrowserData** objects. An object of
this kind stores up information on: the server’s CLSID> the server’s
Description the OPC Specification the server supports the server’s
ProgID the server’s version independent ProgID the server’s URL.

Note
~~~~

::

   This information can be used with different purposes. For instance, the URL is used to add DaSession or AeSession 
   objects to the Application class. This permits starting the communication with a Data Access or an Alarms and 
   Events server.

Example 1
~~~~~~~~~

The following example shows how to **synchronously** browse the servers
that support the Data Access Specification 2.0. The servers are
installed on the local computer.

For a more detailed example on this topic check the **OPCEnumerate**
example.

C
~

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;

   ...
   // gets the application instance
   Application application = Application.Instance;

   // initializes the application
   application.Initialize();

   // the operation will be done synchronously (this is the implicit way of executing operations)
   ExecutionOptions executionOptions = new ExecutionOptions();

   // creates a new instance of the ServerBrowser class to browse the servers installed on the local computer
   ServerBrowser serverBrowser = new ServerBrowser("localhost");

   // initializes the array that will store the information about the servers
   ServerBrowserData[] serverData = null;

   // specifies what interface specification the servers support; in this case is Data Access Specification 2.0
   EnumOPCSpecification specification = EnumOPCSpecification.DA20;

   // browses the servers
   if(ResultCode.SUCCEEDED(
       serverBrowser.Browse(
           specification,
           // gives all information available for a server
           EnumServerBrowserData.SERVERBROWSERDATA_ALL,
           out serverData,
           executionOptions))){

       // do some work here
   ...
   }

   // terminates the application
   application.Terminate();
   ...

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...
   'gets the application instance
   Dim application As Application = Application.Instance

   'initializes the application
   application.Initialize()

   'the operation will be done synchronously (this is the implicit way of executing operations)
   Dim executionOptions As ExecutionOptions = new ExecutionOptions()

   'creates a new instance of the ServerBrowser class to browse the servers installed on the local computer
   Dim serverBrowser As ServerBrowser = new ServerBrowser("localhost")

   'initializes the array that will store the information about the servers
   Dim serverData As ServerBrowserData() = Nothing    

   'browses the servers
   If ResultCode.SUCCEEDED(
       serverBrowser.Browse(
           EnumOPCSpecification.DA20, _
           // gives all information available for a server
           EnumServerBrowserData.SERVERBROWSERDATA_ALL, _
           serverData, _
           executionOptions))) Then

       'do some work here


   End If
   ...

   'terminates the application
   application.Terminate();
   ...

.. _c-1:

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...
   int _tmain(int argc, _TCHAR* argv[])
   {        
       unsigned long result;

       // get an instance of the Application class
       Application* application = getApplication();

       // initializes the application
       if(SUCCEEDED(application->initialize())){

          // creates a new instance of the ServerBrowser class to browse the servers installed on the local computer
          ServerBrowser* serverBrowser = new ServerBrowser(_T("localhost"));

          // the array that will store the information about the servers
          std::vector<ServerBrowserData*> serverData;    
          std::vector<ServerBrowserData*>::iterator browserDataIterator;

          // specifies what interface specification the servers support; in this case is Data Access Specification 2.0
           EnumOPCSpecification specification = DA20;
           ExecutionOptions executionOptions;

           // browses the servers synchronously
           result = serverBrowser->browse(
                     specification,
                   // gives all information available for a server
                   SERVERBROWSERDATA_ALL,
                   serverData,
                   &executionOptions);

           if(SUCCEEDED(result)){        

               // do some work here
               ...
           } // end if    

           delete serverBrowser;
           // delete all the ServerBrowserData objects from the serverData vector,too
           for(browserDataIterator = serverData.begin(); browserDataIterator != serverData.end(); browserDataIterator++){

               delete (*browserDataIterator);

           } // end for

          application->terminate();
          releaseApplication();

         } // end if
       }

Example 2
~~~~~~~~~

The following example shows how to **asynchronously** browse the servers
that support the Data Access Specification 2.0. The servers are
installed on the local computer.

For a more detailed example on this topic see the **OPCEnumerate**
example.

.. _c-2:

C
~

::

   using Softing.OPCToolbox.Client;
   using Softing.OPCToolbox;
   ...

   // the method that will handle the occurrence of the BrowseServersCompleted event
   private void HandleBrowseServers(
       ServerBrowser aServerBrowser,
       uint executionContext,
       String ipAddress,
       ServerBrowserData[] serverData,
       int result){

       if(ResultCode.SUCCEEDED(result)){
           System.Diagnostics.Debug.WriteLine("Asynchronous browse succeded");
           // do some work here
       else{
           System.Diagnostics.Debug.WriteLine("Asynchronous browse failed");
       } // end if ... else
   ...
   // gets the application instance
   Application application = Application.Instance;

   // initializes the application
   application.Initialize();

   // the operation will be done asynchronously
   ExecutionOptions executionOptions = new ExecutionOptions();
   executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS;

   // creates a new instance of the ServerBrowser class to browse the servers installed on the local computer
   ServerBrowser serverBrowser = new ServerBrowser(“localhost”);

   // assigns a delegate for the BrowseServersCompleted event
   serverBrowser.BrowseServersCompleted += new BrowseServersEventHandler(HandleBrowseServers);    

   // initializes the array that will store the information about the servers
   ServerBrowserData[] serverData = null;

   // specifies what interface specification the servers support; in this case is Data Access Specification 2.0
   EnumOPCSpecification specification = EnumOPCSpecification.DA20;

   // sets the execution context of the current execution options;
   // the execution context will identify the server browser for which the browsing is made and thus it is very important to be set before
   // starting the browsing operation
   executionOptions.ExecutionContext = (uint)serverBrowser.GetHashCode();

   // browses the servers
   serverBrowser.Browse(
       specification,
       // gives all information available for a server
       EnumServerBrowserData.SERVERBROWSERDATA_ALL,
       out serverData,
       executionOptions);

   // terminates the application
   application.Terminate();
   ...

.. _vb-.net-1:

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox.Client
   Imports Softing.OPCToolbox
   ...

   'the method that will handle the occurrence of the BrowseServersCompleted event
   Private Sub HandleBrowseServers(
       ByVal aServerBrowser As ServerBrowser, _
       ByVal executionContext As System.UInt32, _
       ByVal ipAddress As String, _
       ByVal serverData As ServerBrowserData(), _
       ByVal int result)

       If ResultCode.SUCCEEDED(result) Then
           System.Diagnostics.Debug.WriteLine("Asynchronous browse succeded")
           'do some work here
       Else
           System.Diagnostics.Debug.WriteLine("Asynchronous browse failed")
       End If 'end if ... else
    End Sub
   ...

   'gets the application instance
   Dim application As Application = Application.Instance

   'initializes the application
   application.Initialize()

   'the operation will be done asynchronously
   Dim executionOptions As ExecutionOptions = new ExecutionOptions()
   executionOptions.ExecutionType = EnumExecutionType.ASYNCHRONOUS
   executionOptions.ExecutionContext = Convert.ToUInt32(1)

   'creates a new instance of the ServerBrowser class to browse the servers installed on the local computer
   Dim serverBrowser As ServerBrowser = new ServerBrowser(“localhost”)

   'assigns a delegate for the BrowseServersCompleted event
   AddHandler serverBrowser.BrowseServersCompleted, AddressOf HandleBrowseServers

   'initializes the array that will store the information about the servers
   Dim serverData As ServerBrowserData() = Nothing    

   'sets the execution context of the current execution options;
   'the execution context will identify the server browser for which the browsing is made and thus it is very important to be set before
   'starting the browsing operation
   executionOptions.ExecutionContext = Convert.ToUInt32(serverBrowser.GetHashCode())

   'browses the servers
   serverBrowser.Browse(
       EnumOPCSpecification.DA20, _
       // gives all information available for a server
       EnumServerBrowserData.SERVERBROWSERDATA_ALL, _
       serverData, _
       executionOptions)

   'terminates the application
   application.Terminate()
   ...

.. _c-3:

C++
~~~

::

   using namespace SoftingOPCToolboxClient;
   ...
   class MyServerBrowser: public ServerBrowser{

       void handleBrowseServersCompleted(
           unsigned long executionContext,
           tstring& ipAddress,
           td::vector<ServerBrowserData*>& serverData,
           long result){

           if(SUCCEEDED(result)){        

               // do some work here

           } // end if
       } // end handleBrowseServersCompleted
   };// end class
   ...
   int _tmain(int argc, _TCHAR* argv[]) {

       unsigned long result;
       ExecutionOptions executionOptions;
       executionOptions.setExecutionType(ASYNCHRONOUS);    

       // get the instance of the Application class
       Application* application = getApplication();

       // initializes the application
       if(SUCCEEDED(application->initialize())){

           // creates a new instance of the ServerBrowser class to browse the servers installed on the local computer
           MyServerBrowser* serverBrowser= new MyServerBrowser(_T("localhost"));

           // declare the array that will store the information about the servers
           std::vector<ServerBrowserData*> serverData;    

           // specifies what interface specification the servers support; in this case is Data Access Specification 2.0
           EnumOPCSpecification specification = DA20;

           // sets the execution context of the current execution options; the execution context will identify the server browser for which
           // the browsing is made thus it is very important to be set before starting the operation of browsing
           executionOptions.setExecutionContext(serverBrowser->getUserData());

           // browses the servers asynchronously
           result = serverBrowser->browse(
                   specification,
                   // gives all information available for a server
                   SERVERBROWSERDATA_ALL,
                   serverData,
                   &executionOptions);

           ...
           delete serverBrowser;
           m_application->terminate();
           releaseApplication();
   }
