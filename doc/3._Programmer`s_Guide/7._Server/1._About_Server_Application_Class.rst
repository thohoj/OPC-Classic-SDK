**About Server Application Class**
----------------------------------

The Application class is the main entry in the server component of the
toolkit. It provides methods for initializing and terminating the
server, tracing handling and adding server objects creator class and
manipulation of the IO. Binary license activation is handled within the
Application instance.

Application class is designed using the Singleton pattern, therefore the
OPC Server application instance is unique, without providing the
possibility to create other instances. In order to get accest to theTo
get an instance of this class the static property **Instance** is used
for .NET and the function **getApp()** is used for C++. ### Note

::

   The OPC server application instance is created by the very first call of the getApp() function (in C++) respective 
   Application.Instance property usage in .NET. The releaseApp() function must be called to release all the resources 
   allocated during runtime. After releaseApp() has been called getApp() should never be called. This will create a 
   new instance of the Application object which is not desirable. For .NET the GC is responsible for destruction of the 
   Instance object.

After getting the application instance, the next step is initializing
the application. Then, all the desired operations are to be performed.
The application must be terminated in order to release all internal
resources of the Softing Toolkit.

Example
~~~~~~~

The following example shows how to do get an application instance,
initialize the application and, at the end, terminate it ### C#

::

   using Softing.OPCToolbox;
   using Softing.OPCToolbox.Server;

   ...
   // configure the OPC Server Application parameters
   Application.Instance.VersionOtb = 441;
   Application.Instance.AppType = EnumApplicationType.EXECUTABLE;
   Application.Instance.ClsidDa = "{BCD4ED37-4B34-4214-89C9-4FBB9C98F78D}";
   Application.Instance.ProgIdDa = "Softing.OPCToolbox.NET.CS.Smpl.Console.DA";
   Application.Instance.VerIndProgIdDa = "Softing.OPCToolbox.NET.CS.Smpl.Console.DA.1";

   ...
   // initialize the application
   int result;
   result = Application.Instance.Initialize(new MyCreator());
   // check the result value
   ...
   // process the command line
   result = Application.Instance.ProcessCommandLine(Environment.CommandLine);

   // start the OPC Application internals
   result = Application.Instance.Start();

   // build the address space(s) DA resp AE
   ...
   // initiate OPC IO startup
   result = Application.Instance.Ready();

   // do the IO work here

   // stop the IO
   Application.Instance.Stop();

   // Terminate the server application
   Application.Instance.Terminate();
   ...

VB .NET
~~~~~~~

::

   Imports Softing.OPCToolbox
   Imports Softing.OPCToolbox.Server
   ...
   'configure the OPC Server Application parameters
   Application.Instance.VersionOtb = 441
   Application.Instance.AppType = EnumApplicationType.EXECUTABLE
   Application.Instance.ClsidDa = "{BCD4ED37-4B34-4214-89C9-4FBB9C98F78D}"
   Application.Instance.ProgIdDa = "Softing.OPCToolbox.NET.VB.Smpl.Console.DA"
   Application.Instance.VerIndProgIdDa = "Softing.OPCToolbox.NET.VB.Smpl.Console.DA.1"

   ...
   'initialize the application
   int result;
   result = Application.Instance.Initialize(New MyCreator)
   'check the result value
   ...
   'process the command line
   result = Application.Instance.ProcessCommandLine(Environment.CommandLine)

   'start the OPC Application internals
   result = Application.Instance.Start()

   'build the address space(s) DA resp AE
   ...
   'initiate OPC IO startup
   result = Application.Instance.Ready()

   'do the IO work here


   'stop the IO
   Application.Instance.[Stop]()

   'terminate the server application
   Application.Instance.Terminate()
   ...

C++
~~~

::

   #include "ServerApplication.h"
   #include "ServerCommon.h"
   ...
   using namespace SoftingOPCToolboxClient;
   ...

   // gets (creates) the application instance
   Application* app = getApp();

   // configure the OPC Server Application parameters
   getApp()->setVersionOtb(441);
   getApp()->setAppType(EnumApplicationType_EXECUTABLE);

   getApp()->setClsidDa(_T("{04789CF1-20C8-4a6e-B405-BE84A79695AA}"));
   getApp()->setProgIdDa(_T("Softing.OPCToolbox.C++.Smpl.Console.DA"));
   getApp()->setVerIndProgIdDa(_T("Softing.OPCToolbox.C++.Smpl.Console.DA.1"));

   ...
   // initialize the application
   long result;
   MyCreator creator;
   result = getApp()->initialize(&creator);
   // check the result value
   ...
   // process the command line
   tstring commandLine(::GetCommandLine());
   result = getApp()->processCommandLine(commandLine);

   // start the OPC Application internals
   result = getApp()->start();

   // build the address space(s) DA resp AE
   ...
   // initiate OPC IO startup
   result = getApp()->ready();

   // do the IO work here

   // stop the IO
   getApp()->stop();

   // Terminate the server application
   getApp()->terminate();

   // trigger the Application instance object release. getApp() must not be used further on
   releaseApp();
   ...
